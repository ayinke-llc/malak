// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// FundraisePipelineColumnTypeNormal is a FundraisePipelineColumnType of type normal.
	FundraisePipelineColumnTypeNormal FundraisePipelineColumnType = "normal"
	// FundraisePipelineColumnTypeClosed is a FundraisePipelineColumnType of type closed.
	FundraisePipelineColumnTypeClosed FundraisePipelineColumnType = "closed"
)

var ErrInvalidFundraisePipelineColumnType = errors.New("not a valid FundraisePipelineColumnType")

// String implements the Stringer interface.
func (x FundraisePipelineColumnType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FundraisePipelineColumnType) IsValid() bool {
	_, err := ParseFundraisePipelineColumnType(string(x))
	return err == nil
}

var _FundraisePipelineColumnTypeValue = map[string]FundraisePipelineColumnType{
	"normal": FundraisePipelineColumnTypeNormal,
	"closed": FundraisePipelineColumnTypeClosed,
}

// ParseFundraisePipelineColumnType attempts to convert a string to a FundraisePipelineColumnType.
func ParseFundraisePipelineColumnType(name string) (FundraisePipelineColumnType, error) {
	if x, ok := _FundraisePipelineColumnTypeValue[name]; ok {
		return x, nil
	}
	return FundraisePipelineColumnType(""), fmt.Errorf("%s is %w", name, ErrInvalidFundraisePipelineColumnType)
}

const (
	// FundraisePipelineStageFamilyAndFriend is a FundraisePipelineStage of type family_and_friend.
	FundraisePipelineStageFamilyAndFriend FundraisePipelineStage = "family_and_friend"
	// FundraisePipelineStagePreSeed is a FundraisePipelineStage of type pre_seed.
	FundraisePipelineStagePreSeed FundraisePipelineStage = "pre_seed"
	// FundraisePipelineStageBridgeRound is a FundraisePipelineStage of type bridge_round.
	FundraisePipelineStageBridgeRound FundraisePipelineStage = "bridge_round"
	// FundraisePipelineStageSeed is a FundraisePipelineStage of type seed.
	FundraisePipelineStageSeed FundraisePipelineStage = "seed"
	// FundraisePipelineStageSeriesA is a FundraisePipelineStage of type series_a.
	FundraisePipelineStageSeriesA FundraisePipelineStage = "series_a"
	// FundraisePipelineStageSeriesB is a FundraisePipelineStage of type series_b.
	FundraisePipelineStageSeriesB FundraisePipelineStage = "series_b"
	// FundraisePipelineStageSeriesC is a FundraisePipelineStage of type series_c.
	FundraisePipelineStageSeriesC FundraisePipelineStage = "series_c"
)

var ErrInvalidFundraisePipelineStage = errors.New("not a valid FundraisePipelineStage")

// String implements the Stringer interface.
func (x FundraisePipelineStage) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FundraisePipelineStage) IsValid() bool {
	_, err := ParseFundraisePipelineStage(string(x))
	return err == nil
}

var _FundraisePipelineStageValue = map[string]FundraisePipelineStage{
	"family_and_friend": FundraisePipelineStageFamilyAndFriend,
	"pre_seed":          FundraisePipelineStagePreSeed,
	"bridge_round":      FundraisePipelineStageBridgeRound,
	"seed":              FundraisePipelineStageSeed,
	"series_a":          FundraisePipelineStageSeriesA,
	"series_b":          FundraisePipelineStageSeriesB,
	"series_c":          FundraisePipelineStageSeriesC,
}

// ParseFundraisePipelineStage attempts to convert a string to a FundraisePipelineStage.
func ParseFundraisePipelineStage(name string) (FundraisePipelineStage, error) {
	if x, ok := _FundraisePipelineStageValue[name]; ok {
		return x, nil
	}
	return FundraisePipelineStage(""), fmt.Errorf("%s is %w", name, ErrInvalidFundraisePipelineStage)
}

const (
	// FundraisingColumnActivityMeeting is a FundraisingColumnActivity of type meeting.
	FundraisingColumnActivityMeeting FundraisingColumnActivity = "meeting"
	// FundraisingColumnActivityNote is a FundraisingColumnActivity of type note.
	FundraisingColumnActivityNote FundraisingColumnActivity = "note"
	// FundraisingColumnActivityEmail is a FundraisingColumnActivity of type email.
	FundraisingColumnActivityEmail FundraisingColumnActivity = "email"
)

var ErrInvalidFundraisingColumnActivity = errors.New("not a valid FundraisingColumnActivity")

// String implements the Stringer interface.
func (x FundraisingColumnActivity) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x FundraisingColumnActivity) IsValid() bool {
	_, err := ParseFundraisingColumnActivity(string(x))
	return err == nil
}

var _FundraisingColumnActivityValue = map[string]FundraisingColumnActivity{
	"meeting": FundraisingColumnActivityMeeting,
	"note":    FundraisingColumnActivityNote,
	"email":   FundraisingColumnActivityEmail,
}

// ParseFundraisingColumnActivity attempts to convert a string to a FundraisingColumnActivity.
func ParseFundraisingColumnActivity(name string) (FundraisingColumnActivity, error) {
	if x, ok := _FundraisingColumnActivityValue[name]; ok {
		return x, nil
	}
	return FundraisingColumnActivity(""), fmt.Errorf("%s is %w", name, ErrInvalidFundraisingColumnActivity)
}
