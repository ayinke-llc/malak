// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// ListUpdateFilterStatusDraft is a ListUpdateFilterStatus of type draft.
	ListUpdateFilterStatusDraft ListUpdateFilterStatus = "draft"
	// ListUpdateFilterStatusSent is a ListUpdateFilterStatus of type sent.
	ListUpdateFilterStatusSent ListUpdateFilterStatus = "sent"
	// ListUpdateFilterStatusAll is a ListUpdateFilterStatus of type all.
	ListUpdateFilterStatusAll ListUpdateFilterStatus = "all"
)

var ErrInvalidListUpdateFilterStatus = errors.New("not a valid ListUpdateFilterStatus")

// String implements the Stringer interface.
func (x ListUpdateFilterStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ListUpdateFilterStatus) IsValid() bool {
	_, err := ParseListUpdateFilterStatus(string(x))
	return err == nil
}

var _ListUpdateFilterStatusValue = map[string]ListUpdateFilterStatus{
	"draft": ListUpdateFilterStatusDraft,
	"sent":  ListUpdateFilterStatusSent,
	"all":   ListUpdateFilterStatusAll,
}

// ParseListUpdateFilterStatus attempts to convert a string to a ListUpdateFilterStatus.
func ParseListUpdateFilterStatus(name string) (ListUpdateFilterStatus, error) {
	if x, ok := _ListUpdateFilterStatusValue[name]; ok {
		return x, nil
	}
	return ListUpdateFilterStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidListUpdateFilterStatus)
}

const (
	// UpdateSendScheduleScheduled is a UpdateSendSchedule of type scheduled.
	UpdateSendScheduleScheduled UpdateSendSchedule = "scheduled"
	// UpdateSendScheduleCancelled is a UpdateSendSchedule of type cancelled.
	UpdateSendScheduleCancelled UpdateSendSchedule = "cancelled"
	// UpdateSendScheduleSent is a UpdateSendSchedule of type sent.
	UpdateSendScheduleSent UpdateSendSchedule = "sent"
	// UpdateSendScheduleFailed is a UpdateSendSchedule of type failed.
	UpdateSendScheduleFailed UpdateSendSchedule = "failed"
)

var ErrInvalidUpdateSendSchedule = errors.New("not a valid UpdateSendSchedule")

// String implements the Stringer interface.
func (x UpdateSendSchedule) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UpdateSendSchedule) IsValid() bool {
	_, err := ParseUpdateSendSchedule(string(x))
	return err == nil
}

var _UpdateSendScheduleValue = map[string]UpdateSendSchedule{
	"scheduled": UpdateSendScheduleScheduled,
	"cancelled": UpdateSendScheduleCancelled,
	"sent":      UpdateSendScheduleSent,
	"failed":    UpdateSendScheduleFailed,
}

// ParseUpdateSendSchedule attempts to convert a string to a UpdateSendSchedule.
func ParseUpdateSendSchedule(name string) (UpdateSendSchedule, error) {
	if x, ok := _UpdateSendScheduleValue[name]; ok {
		return x, nil
	}
	return UpdateSendSchedule(""), fmt.Errorf("%s is %w", name, ErrInvalidUpdateSendSchedule)
}

const (
	// UpdateStatusDraft is a UpdateStatus of type draft.
	UpdateStatusDraft UpdateStatus = "draft"
	// UpdateStatusSent is a UpdateStatus of type sent.
	UpdateStatusSent UpdateStatus = "sent"
)

var ErrInvalidUpdateStatus = errors.New("not a valid UpdateStatus")

// String implements the Stringer interface.
func (x UpdateStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UpdateStatus) IsValid() bool {
	_, err := ParseUpdateStatus(string(x))
	return err == nil
}

var _UpdateStatusValue = map[string]UpdateStatus{
	"draft": UpdateStatusDraft,
	"sent":  UpdateStatusSent,
}

// ParseUpdateStatus attempts to convert a string to a UpdateStatus.
func ParseUpdateStatus(name string) (UpdateStatus, error) {
	if x, ok := _UpdateStatusValue[name]; ok {
		return x, nil
	}
	return UpdateStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidUpdateStatus)
}
