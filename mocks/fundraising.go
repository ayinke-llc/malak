// Code generated by MockGen. DO NOT EDIT.
// Source: fundraising.go
//
// Generated by this command:
//
//	mockgen -source=fundraising.go -destination=mocks/fundraising.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockFundraisingPipelineRepository is a mock of FundraisingPipelineRepository interface.
type MockFundraisingPipelineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFundraisingPipelineRepositoryMockRecorder
	isgomock struct{}
}

// MockFundraisingPipelineRepositoryMockRecorder is the mock recorder for MockFundraisingPipelineRepository.
type MockFundraisingPipelineRepositoryMockRecorder struct {
	mock *MockFundraisingPipelineRepository
}

// NewMockFundraisingPipelineRepository creates a new mock instance.
func NewMockFundraisingPipelineRepository(ctrl *gomock.Controller) *MockFundraisingPipelineRepository {
	mock := &MockFundraisingPipelineRepository{ctrl: ctrl}
	mock.recorder = &MockFundraisingPipelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFundraisingPipelineRepository) EXPECT() *MockFundraisingPipelineRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFundraisingPipelineRepository) Create(arg0 context.Context, arg1 *malak.FundraisingPipeline, arg2 ...malak.FundraisingPipelineColumn) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFundraisingPipelineRepositoryMockRecorder) Create(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFundraisingPipelineRepository)(nil).Create), varargs...)
}
