// Code generated by MockGen. DO NOT EDIT.
// Source: fundraising.go
//
// Generated by this command:
//
//	mockgen -source=fundraising.go -destination=mocks/fundraising.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockFundraisingPipelineRepository is a mock of FundraisingPipelineRepository interface.
type MockFundraisingPipelineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFundraisingPipelineRepositoryMockRecorder
	isgomock struct{}
}

// MockFundraisingPipelineRepositoryMockRecorder is the mock recorder for MockFundraisingPipelineRepository.
type MockFundraisingPipelineRepositoryMockRecorder struct {
	mock *MockFundraisingPipelineRepository
}

// NewMockFundraisingPipelineRepository creates a new mock instance.
func NewMockFundraisingPipelineRepository(ctrl *gomock.Controller) *MockFundraisingPipelineRepository {
	mock := &MockFundraisingPipelineRepository{ctrl: ctrl}
	mock.recorder = &MockFundraisingPipelineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFundraisingPipelineRepository) EXPECT() *MockFundraisingPipelineRepositoryMockRecorder {
	return m.recorder
}

// Board mocks base method.
func (m *MockFundraisingPipelineRepository) Board(arg0 context.Context, arg1 *malak.FundraisingPipeline) ([]malak.FundraisingPipelineColumn, []malak.FundraiseContact, []malak.FundraiseContactPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Board", arg0, arg1)
	ret0, _ := ret[0].([]malak.FundraisingPipelineColumn)
	ret1, _ := ret[1].([]malak.FundraiseContact)
	ret2, _ := ret[2].([]malak.FundraiseContactPosition)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Board indicates an expected call of Board.
func (mr *MockFundraisingPipelineRepositoryMockRecorder) Board(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Board", reflect.TypeOf((*MockFundraisingPipelineRepository)(nil).Board), arg0, arg1)
}

// Create mocks base method.
func (m *MockFundraisingPipelineRepository) Create(arg0 context.Context, arg1 *malak.FundraisingPipeline, arg2 ...malak.FundraisingPipelineColumn) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFundraisingPipelineRepositoryMockRecorder) Create(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFundraisingPipelineRepository)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockFundraisingPipelineRepository) Get(arg0 context.Context, arg1 malak.FetchPipelineOptions) (*malak.FundraisingPipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.FundraisingPipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFundraisingPipelineRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFundraisingPipelineRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockFundraisingPipelineRepository) List(arg0 context.Context, arg1 malak.ListPipelineOptions) ([]malak.FundraisingPipeline, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.FundraisingPipeline)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFundraisingPipelineRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFundraisingPipelineRepository)(nil).List), arg0, arg1)
}
