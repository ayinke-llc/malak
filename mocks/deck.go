// Code generated by MockGen. DO NOT EDIT.
// Source: deck.go
//
// Generated by this command:
//
//	mockgen -source=deck.go -destination=mocks/deck.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockDeckRepository is a mock of DeckRepository interface.
type MockDeckRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeckRepositoryMockRecorder
	isgomock struct{}
}

// MockDeckRepositoryMockRecorder is the mock recorder for MockDeckRepository.
type MockDeckRepositoryMockRecorder struct {
	mock *MockDeckRepository
}

// NewMockDeckRepository creates a new mock instance.
func NewMockDeckRepository(ctrl *gomock.Controller) *MockDeckRepository {
	mock := &MockDeckRepository{ctrl: ctrl}
	mock.recorder = &MockDeckRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeckRepository) EXPECT() *MockDeckRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeckRepository) Create(arg0 context.Context, arg1 *malak.Deck, arg2 *malak.CreateDeckOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeckRepositoryMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeckRepository)(nil).Create), arg0, arg1, arg2)
}

// CreateDeckSession mocks base method.
func (m *MockDeckRepository) CreateDeckSession(arg0 context.Context, arg1 *malak.DeckViewerSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeckSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeckSession indicates an expected call of CreateDeckSession.
func (mr *MockDeckRepositoryMockRecorder) CreateDeckSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeckSession", reflect.TypeOf((*MockDeckRepository)(nil).CreateDeckSession), arg0, arg1)
}

// DeckEngagements mocks base method.
func (m *MockDeckRepository) DeckEngagements(arg0 context.Context, arg1 *malak.ListDeckEngagementsOptions) (*malak.DeckEngagementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeckEngagements", arg0, arg1)
	ret0, _ := ret[0].(*malak.DeckEngagementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeckEngagements indicates an expected call of DeckEngagements.
func (mr *MockDeckRepositoryMockRecorder) DeckEngagements(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeckEngagements", reflect.TypeOf((*MockDeckRepository)(nil).DeckEngagements), arg0, arg1)
}

// Delete mocks base method.
func (m *MockDeckRepository) Delete(arg0 context.Context, arg1 *malak.Deck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDeckRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeckRepository)(nil).Delete), arg0, arg1)
}

// FindDeckSession mocks base method.
func (m *MockDeckRepository) FindDeckSession(arg0 context.Context, arg1 string) (*malak.DeckViewerSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeckSession", arg0, arg1)
	ret0, _ := ret[0].(*malak.DeckViewerSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeckSession indicates an expected call of FindDeckSession.
func (mr *MockDeckRepositoryMockRecorder) FindDeckSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeckSession", reflect.TypeOf((*MockDeckRepository)(nil).FindDeckSession), arg0, arg1)
}

// Get mocks base method.
func (m *MockDeckRepository) Get(arg0 context.Context, arg1 malak.FetchDeckOptions) (*malak.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeckRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeckRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockDeckRepository) List(arg0 context.Context, arg1 *malak.Workspace) ([]malak.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDeckRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeckRepository)(nil).List), arg0, arg1)
}

// PublicDetails mocks base method.
func (m *MockDeckRepository) PublicDetails(arg0 context.Context, arg1 malak.Reference) (*malak.Deck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicDetails", arg0, arg1)
	ret0, _ := ret[0].(*malak.Deck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicDetails indicates an expected call of PublicDetails.
func (mr *MockDeckRepositoryMockRecorder) PublicDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicDetails", reflect.TypeOf((*MockDeckRepository)(nil).PublicDetails), arg0, arg1)
}

// SessionAnalytics mocks base method.
func (m *MockDeckRepository) SessionAnalytics(arg0 context.Context, arg1 *malak.ListSessionAnalyticsOptions) ([]*malak.DeckViewerSession, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionAnalytics", arg0, arg1)
	ret0, _ := ret[0].([]*malak.DeckViewerSession)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SessionAnalytics indicates an expected call of SessionAnalytics.
func (mr *MockDeckRepositoryMockRecorder) SessionAnalytics(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionAnalytics", reflect.TypeOf((*MockDeckRepository)(nil).SessionAnalytics), arg0, arg1)
}

// ToggleArchive mocks base method.
func (m *MockDeckRepository) ToggleArchive(arg0 context.Context, arg1 *malak.Deck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleArchive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleArchive indicates an expected call of ToggleArchive.
func (mr *MockDeckRepositoryMockRecorder) ToggleArchive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleArchive", reflect.TypeOf((*MockDeckRepository)(nil).ToggleArchive), arg0, arg1)
}

// TogglePinned mocks base method.
func (m *MockDeckRepository) TogglePinned(arg0 context.Context, arg1 *malak.Deck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePinned", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TogglePinned indicates an expected call of TogglePinned.
func (mr *MockDeckRepositoryMockRecorder) TogglePinned(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePinned", reflect.TypeOf((*MockDeckRepository)(nil).TogglePinned), arg0, arg1)
}

// UpdateDeckSession mocks base method.
func (m *MockDeckRepository) UpdateDeckSession(arg0 context.Context, arg1 *malak.UpdateDeckSessionOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeckSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeckSession indicates an expected call of UpdateDeckSession.
func (mr *MockDeckRepositoryMockRecorder) UpdateDeckSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeckSession", reflect.TypeOf((*MockDeckRepository)(nil).UpdateDeckSession), arg0, arg1)
}

// UpdatePreferences mocks base method.
func (m *MockDeckRepository) UpdatePreferences(arg0 context.Context, arg1 *malak.Deck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreferences", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreferences indicates an expected call of UpdatePreferences.
func (mr *MockDeckRepositoryMockRecorder) UpdatePreferences(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreferences", reflect.TypeOf((*MockDeckRepository)(nil).UpdatePreferences), arg0, arg1)
}
