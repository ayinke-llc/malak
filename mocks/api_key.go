// Code generated by MockGen. DO NOT EDIT.
// Source: api_key.go
//
// Generated by this command:
//
//	mockgen -source=api_key.go -destination=mocks/api_key.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIKeyRepository is a mock of APIKeyRepository interface.
type MockAPIKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAPIKeyRepositoryMockRecorder
	isgomock struct{}
}

// MockAPIKeyRepositoryMockRecorder is the mock recorder for MockAPIKeyRepository.
type MockAPIKeyRepositoryMockRecorder struct {
	mock *MockAPIKeyRepository
}

// NewMockAPIKeyRepository creates a new mock instance.
func NewMockAPIKeyRepository(ctrl *gomock.Controller) *MockAPIKeyRepository {
	mock := &MockAPIKeyRepository{ctrl: ctrl}
	mock.recorder = &MockAPIKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIKeyRepository) EXPECT() *MockAPIKeyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAPIKeyRepository) Create(arg0 context.Context, arg1 *malak.APIKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAPIKeyRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPIKeyRepository)(nil).Create), arg0, arg1)
}

// Fetch mocks base method.
func (m *MockAPIKeyRepository) Fetch(arg0 context.Context, arg1 malak.FetchAPIKeyOptions) (*malak.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(*malak.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockAPIKeyRepositoryMockRecorder) Fetch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockAPIKeyRepository)(nil).Fetch), arg0, arg1)
}

// FetchByValue mocks base method.
func (m *MockAPIKeyRepository) FetchByValue(arg0 context.Context, arg1 string) (*malak.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByValue", arg0, arg1)
	ret0, _ := ret[0].(*malak.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByValue indicates an expected call of FetchByValue.
func (mr *MockAPIKeyRepositoryMockRecorder) FetchByValue(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByValue", reflect.TypeOf((*MockAPIKeyRepository)(nil).FetchByValue), arg0, arg1)
}

// List mocks base method.
func (m *MockAPIKeyRepository) List(arg0 context.Context, arg1 uuid.UUID) ([]malak.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAPIKeyRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAPIKeyRepository)(nil).List), arg0, arg1)
}

// Revoke mocks base method.
func (m *MockAPIKeyRepository) Revoke(arg0 context.Context, arg1 malak.RevokeAPIKeyOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAPIKeyRepositoryMockRecorder) Revoke(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAPIKeyRepository)(nil).Revoke), arg0, arg1)
}
