// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go
//
// Generated by this command:
//
//	mockgen -source=workspace.go -destination=mocks/workspace.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspaceRepository is a mock of WorkspaceRepository interface.
type MockWorkspaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepositoryMockRecorder
}

// MockWorkspaceRepositoryMockRecorder is the mock recorder for MockWorkspaceRepository.
type MockWorkspaceRepositoryMockRecorder struct {
	mock *MockWorkspaceRepository
}

// NewMockWorkspaceRepository creates a new mock instance.
func NewMockWorkspaceRepository(ctrl *gomock.Controller) *MockWorkspaceRepository {
	mock := &MockWorkspaceRepository{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepository) EXPECT() *MockWorkspaceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWorkspaceRepository) Create(arg0 context.Context, arg1 *malak.CreateWorkspaceOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWorkspaceRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWorkspaceRepository)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockWorkspaceRepository) Get(arg0 context.Context, arg1 *malak.FindWorkspaceOptions) (*malak.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWorkspaceRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWorkspaceRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockWorkspaceRepository) List(arg0 context.Context, arg1 *malak.User) ([]malak.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWorkspaceRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWorkspaceRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockWorkspaceRepository) Update(arg0 context.Context, arg1 *malak.Workspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWorkspaceRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWorkspaceRepository)(nil).Update), arg0, arg1)
}
