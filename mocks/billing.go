// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/billing/billing.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/billing/billing.go -destination=mocks/billing.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	billing "github.com/ayinke-llc/malak/internal/pkg/billing"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddPlanToCustomer mocks base method.
func (m *MockClient) AddPlanToCustomer(arg0 context.Context, arg1 *billing.AddPlanToCustomerOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlanToCustomer", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlanToCustomer indicates an expected call of AddPlanToCustomer.
func (mr *MockClientMockRecorder) AddPlanToCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlanToCustomer", reflect.TypeOf((*MockClient)(nil).AddPlanToCustomer), arg0, arg1)
}

// CreateCustomer mocks base method.
func (m *MockClient) CreateCustomer(arg0 context.Context, arg1 *billing.CreateCustomerOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockClientMockRecorder) CreateCustomer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockClient)(nil).CreateCustomer), arg0, arg1)
}

// Portal mocks base method.
func (m *MockClient) Portal(arg0 context.Context, arg1 *billing.CreateBillingPortalOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Portal", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Portal indicates an expected call of Portal.
func (mr *MockClientMockRecorder) Portal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Portal", reflect.TypeOf((*MockClient)(nil).Portal), arg0, arg1)
}
