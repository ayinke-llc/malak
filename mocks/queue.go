// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/queue/queue.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/queue/queue.go -destination=mocks/queue.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	queue "github.com/ayinke-llc/malak/internal/pkg/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueueHandler is a mock of QueueHandler interface.
type MockQueueHandler struct {
	ctrl     *gomock.Controller
	recorder *MockQueueHandlerMockRecorder
}

// MockQueueHandlerMockRecorder is the mock recorder for MockQueueHandler.
type MockQueueHandlerMockRecorder struct {
	mock *MockQueueHandler
}

// NewMockQueueHandler creates a new mock instance.
func NewMockQueueHandler(ctrl *gomock.Controller) *MockQueueHandler {
	mock := &MockQueueHandler{ctrl: ctrl}
	mock.recorder = &MockQueueHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueHandler) EXPECT() *MockQueueHandlerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockQueueHandler) Add(arg0 context.Context, arg1 string, arg2 *queue.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockQueueHandlerMockRecorder) Add(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockQueueHandler)(nil).Add), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockQueueHandler) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueHandlerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueHandler)(nil).Close))
}

// Start mocks base method.
func (m *MockQueueHandler) Start(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockQueueHandlerMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockQueueHandler)(nil).Start), arg0)
}
