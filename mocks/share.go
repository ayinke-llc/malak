// Code generated by MockGen. DO NOT EDIT.
// Source: share.go
//
// Generated by this command:
//
//	mockgen -source=share.go -destination=mocks/share.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockContactShareRepository is a mock of ContactShareRepository interface.
type MockContactShareRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactShareRepositoryMockRecorder
	isgomock struct{}
}

// MockContactShareRepositoryMockRecorder is the mock recorder for MockContactShareRepository.
type MockContactShareRepositoryMockRecorder struct {
	mock *MockContactShareRepository
}

// NewMockContactShareRepository creates a new mock instance.
func NewMockContactShareRepository(ctrl *gomock.Controller) *MockContactShareRepository {
	mock := &MockContactShareRepository{ctrl: ctrl}
	mock.recorder = &MockContactShareRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactShareRepository) EXPECT() *MockContactShareRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockContactShareRepository) All(arg0 context.Context, arg1 *malak.Contact) ([]malak.ContactShareItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0, arg1)
	ret0, _ := ret[0].([]malak.ContactShareItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockContactShareRepositoryMockRecorder) All(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockContactShareRepository)(nil).All), arg0, arg1)
}
