// Code generated by MockGen. DO NOT EDIT.
// Source: update.go
//
// Generated by this command:
//
//	mockgen -source=update.go -destination=mocks/update.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateRepository is a mock of UpdateRepository interface.
type MockUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRepositoryMockRecorder
	isgomock struct{}
}

// MockUpdateRepositoryMockRecorder is the mock recorder for MockUpdateRepository.
type MockUpdateRepositoryMockRecorder struct {
	mock *MockUpdateRepository
}

// NewMockUpdateRepository creates a new mock instance.
func NewMockUpdateRepository(ctrl *gomock.Controller) *MockUpdateRepository {
	mock := &MockUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRepository) EXPECT() *MockUpdateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUpdateRepository) Create(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUpdateRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUpdateRepository)(nil).Create), arg0, arg1)
}

// CreatePreview mocks base method.
func (m *MockUpdateRepository) CreatePreview(arg0 context.Context, arg1 *malak.UpdateSchedule, arg2 *malak.CreatePreviewOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePreview", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePreview indicates an expected call of CreatePreview.
func (mr *MockUpdateRepositoryMockRecorder) CreatePreview(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePreview", reflect.TypeOf((*MockUpdateRepository)(nil).CreatePreview), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUpdateRepository) Delete(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUpdateRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUpdateRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockUpdateRepository) Get(arg0 context.Context, arg1 malak.FetchUpdateOptions) (*malak.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdateRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdateRepository)(nil).Get), arg0, arg1)
}

// GetSchedule mocks base method.
func (m *MockUpdateRepository) GetSchedule(arg0 context.Context, arg1 uuid.UUID) (*malak.UpdateSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", arg0, arg1)
	ret0, _ := ret[0].(*malak.UpdateSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockUpdateRepositoryMockRecorder) GetSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockUpdateRepository)(nil).GetSchedule), arg0, arg1)
}

// List mocks base method.
func (m *MockUpdateRepository) List(arg0 context.Context, arg1 malak.ListUpdateOptions) ([]malak.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUpdateRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUpdateRepository)(nil).List), arg0, arg1)
}

// SendUpdate mocks base method.
func (m *MockUpdateRepository) SendUpdate(arg0 context.Context, arg1 *malak.CreatePreviewOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUpdate indicates an expected call of SendUpdate.
func (mr *MockUpdateRepositoryMockRecorder) SendUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdate", reflect.TypeOf((*MockUpdateRepository)(nil).SendUpdate), arg0, arg1)
}

// TogglePinned mocks base method.
func (m *MockUpdateRepository) TogglePinned(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePinned", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TogglePinned indicates an expected call of TogglePinned.
func (mr *MockUpdateRepositoryMockRecorder) TogglePinned(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePinned", reflect.TypeOf((*MockUpdateRepository)(nil).TogglePinned), arg0, arg1)
}

// Update mocks base method.
func (m *MockUpdateRepository) Update(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateRepository)(nil).Update), arg0, arg1)
}
