// Code generated by MockGen. DO NOT EDIT.
// Source: update.go
//
// Generated by this command:
//
//	mockgen -source=update.go -destination=mocks/update.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateRepository is a mock of UpdateRepository interface.
type MockUpdateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateRepositoryMockRecorder
	isgomock struct{}
}

// MockUpdateRepositoryMockRecorder is the mock recorder for MockUpdateRepository.
type MockUpdateRepositoryMockRecorder struct {
	mock *MockUpdateRepository
}

// NewMockUpdateRepository creates a new mock instance.
func NewMockUpdateRepository(ctrl *gomock.Controller) *MockUpdateRepository {
	mock := &MockUpdateRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateRepository) EXPECT() *MockUpdateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUpdateRepository) Create(arg0 context.Context, arg1 *malak.Update, arg2 *malak.TemplateCreateUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUpdateRepositoryMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUpdateRepository)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockUpdateRepository) Delete(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUpdateRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUpdateRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockUpdateRepository) Get(arg0 context.Context, arg1 malak.FetchUpdateOptions) (*malak.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdateRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdateRepository)(nil).Get), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockUpdateRepository) GetByID(arg0 context.Context, arg1 uuid.UUID) (*malak.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*malak.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUpdateRepositoryMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUpdateRepository)(nil).GetByID), arg0, arg1)
}

// GetSchedule mocks base method.
func (m *MockUpdateRepository) GetSchedule(arg0 context.Context, arg1 uuid.UUID) (*malak.UpdateSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", arg0, arg1)
	ret0, _ := ret[0].(*malak.UpdateSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockUpdateRepositoryMockRecorder) GetSchedule(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockUpdateRepository)(nil).GetSchedule), arg0, arg1)
}

// GetStatByEmailID mocks base method.
func (m *MockUpdateRepository) GetStatByEmailID(arg0 context.Context, arg1 string, arg2 malak.UpdateRecipientLogProvider) (*malak.UpdateRecipientLog, *malak.UpdateRecipientStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatByEmailID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*malak.UpdateRecipientLog)
	ret1, _ := ret[1].(*malak.UpdateRecipientStat)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatByEmailID indicates an expected call of GetStatByEmailID.
func (mr *MockUpdateRepositoryMockRecorder) GetStatByEmailID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatByEmailID", reflect.TypeOf((*MockUpdateRepository)(nil).GetStatByEmailID), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockUpdateRepository) List(arg0 context.Context, arg1 malak.ListUpdateOptions) ([]malak.Update, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.Update)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockUpdateRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUpdateRepository)(nil).List), arg0, arg1)
}

// ListPinned mocks base method.
func (m *MockUpdateRepository) ListPinned(arg0 context.Context, arg1 uuid.UUID) ([]malak.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPinned", arg0, arg1)
	ret0, _ := ret[0].([]malak.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPinned indicates an expected call of ListPinned.
func (mr *MockUpdateRepositoryMockRecorder) ListPinned(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPinned", reflect.TypeOf((*MockUpdateRepository)(nil).ListPinned), arg0, arg1)
}

// Overview mocks base method.
func (m *MockUpdateRepository) Overview(arg0 context.Context, arg1 uuid.UUID) (*malak.UpdateOverview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Overview", arg0, arg1)
	ret0, _ := ret[0].(*malak.UpdateOverview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Overview indicates an expected call of Overview.
func (mr *MockUpdateRepositoryMockRecorder) Overview(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Overview", reflect.TypeOf((*MockUpdateRepository)(nil).Overview), arg0, arg1)
}

// RecipientStat mocks base method.
func (m *MockUpdateRepository) RecipientStat(arg0 context.Context, arg1 *malak.Update) ([]malak.UpdateRecipient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecipientStat", arg0, arg1)
	ret0, _ := ret[0].([]malak.UpdateRecipient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecipientStat indicates an expected call of RecipientStat.
func (mr *MockUpdateRepositoryMockRecorder) RecipientStat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecipientStat", reflect.TypeOf((*MockUpdateRepository)(nil).RecipientStat), arg0, arg1)
}

// SendUpdate mocks base method.
func (m *MockUpdateRepository) SendUpdate(arg0 context.Context, arg1 *malak.CreateUpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUpdate indicates an expected call of SendUpdate.
func (mr *MockUpdateRepositoryMockRecorder) SendUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdate", reflect.TypeOf((*MockUpdateRepository)(nil).SendUpdate), arg0, arg1)
}

// Stat mocks base method.
func (m *MockUpdateRepository) Stat(arg0 context.Context, arg1 *malak.Update) (*malak.UpdateStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0, arg1)
	ret0, _ := ret[0].(*malak.UpdateStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockUpdateRepositoryMockRecorder) Stat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockUpdateRepository)(nil).Stat), arg0, arg1)
}

// TogglePinned mocks base method.
func (m *MockUpdateRepository) TogglePinned(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePinned", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TogglePinned indicates an expected call of TogglePinned.
func (mr *MockUpdateRepositoryMockRecorder) TogglePinned(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePinned", reflect.TypeOf((*MockUpdateRepository)(nil).TogglePinned), arg0, arg1)
}

// Update mocks base method.
func (m *MockUpdateRepository) Update(arg0 context.Context, arg1 *malak.Update) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUpdateRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdateRepository)(nil).Update), arg0, arg1)
}

// UpdateStat mocks base method.
func (m *MockUpdateRepository) UpdateStat(arg0 context.Context, arg1 *malak.UpdateStat, arg2 *malak.UpdateRecipientStat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockUpdateRepositoryMockRecorder) UpdateStat(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockUpdateRepository)(nil).UpdateStat), arg0, arg1, arg2)
}
