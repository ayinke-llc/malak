// Code generated by MockGen. DO NOT EDIT.
// Source: integration.go
//
// Generated by this command:
//
//	mockgen -source=integration.go -destination=mocks/integration.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegrationRepository is a mock of IntegrationRepository interface.
type MockIntegrationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationRepositoryMockRecorder
	isgomock struct{}
}

// MockIntegrationRepositoryMockRecorder is the mock recorder for MockIntegrationRepository.
type MockIntegrationRepositoryMockRecorder struct {
	mock *MockIntegrationRepository
}

// NewMockIntegrationRepository creates a new mock instance.
func NewMockIntegrationRepository(ctrl *gomock.Controller) *MockIntegrationRepository {
	mock := &MockIntegrationRepository{ctrl: ctrl}
	mock.recorder = &MockIntegrationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationRepository) EXPECT() *MockIntegrationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIntegrationRepository) Create(arg0 context.Context, arg1 *malak.Integration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIntegrationRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIntegrationRepository)(nil).Create), arg0, arg1)
}

// List mocks base method.
func (m *MockIntegrationRepository) List(arg0 context.Context, arg1 *malak.Workspace) ([]malak.WorkspaceIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.WorkspaceIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIntegrationRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIntegrationRepository)(nil).List), arg0, arg1)
}

// MockIntegrationProvider is a mock of IntegrationProvider interface.
type MockIntegrationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationProviderMockRecorder
	isgomock struct{}
}

// MockIntegrationProviderMockRecorder is the mock recorder for MockIntegrationProvider.
type MockIntegrationProviderMockRecorder struct {
	mock *MockIntegrationProvider
}

// NewMockIntegrationProvider creates a new mock instance.
func NewMockIntegrationProvider(ctrl *gomock.Controller) *MockIntegrationProvider {
	mock := &MockIntegrationProvider{ctrl: ctrl}
	mock.recorder = &MockIntegrationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationProvider) EXPECT() *MockIntegrationProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIntegrationProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIntegrationProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIntegrationProvider)(nil).Close))
}

// Name mocks base method.
func (m *MockIntegrationProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIntegrationProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIntegrationProvider)(nil).Name))
}
