// Code generated by MockGen. DO NOT EDIT.
// Source: integration.go
//
// Generated by this command:
//
//	mockgen -source=integration.go -destination=mocks/integration.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockIntegrationProviderClient is a mock of IntegrationProviderClient interface.
type MockIntegrationProviderClient struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationProviderClientMockRecorder
	isgomock struct{}
}

// MockIntegrationProviderClientMockRecorder is the mock recorder for MockIntegrationProviderClient.
type MockIntegrationProviderClientMockRecorder struct {
	mock *MockIntegrationProviderClient
}

// NewMockIntegrationProviderClient creates a new mock instance.
func NewMockIntegrationProviderClient(ctrl *gomock.Controller) *MockIntegrationProviderClient {
	mock := &MockIntegrationProviderClient{ctrl: ctrl}
	mock.recorder = &MockIntegrationProviderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationProviderClient) EXPECT() *MockIntegrationProviderClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIntegrationProviderClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIntegrationProviderClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIntegrationProviderClient)(nil).Close))
}

// Name mocks base method.
func (m *MockIntegrationProviderClient) Name() malak.IntegrationProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(malak.IntegrationProvider)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIntegrationProviderClientMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIntegrationProviderClient)(nil).Name))
}

// Ping mocks base method.
func (m *MockIntegrationProviderClient) Ping(arg0 context.Context, arg1 malak.AccessToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIntegrationProviderClientMockRecorder) Ping(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIntegrationProviderClient)(nil).Ping), arg0, arg1)
}

// MockIntegrationRepository is a mock of IntegrationRepository interface.
type MockIntegrationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIntegrationRepositoryMockRecorder
	isgomock struct{}
}

// MockIntegrationRepositoryMockRecorder is the mock recorder for MockIntegrationRepository.
type MockIntegrationRepositoryMockRecorder struct {
	mock *MockIntegrationRepository
}

// NewMockIntegrationRepository creates a new mock instance.
func NewMockIntegrationRepository(ctrl *gomock.Controller) *MockIntegrationRepository {
	mock := &MockIntegrationRepository{ctrl: ctrl}
	mock.recorder = &MockIntegrationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIntegrationRepository) EXPECT() *MockIntegrationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIntegrationRepository) Create(arg0 context.Context, arg1 *malak.Integration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIntegrationRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIntegrationRepository)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIntegrationRepository) Get(arg0 context.Context, arg1 malak.FindWorkspaceIntegrationOptions) (*malak.WorkspaceIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.WorkspaceIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIntegrationRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIntegrationRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockIntegrationRepository) List(arg0 context.Context, arg1 *malak.Workspace) ([]malak.WorkspaceIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.WorkspaceIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIntegrationRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIntegrationRepository)(nil).List), arg0, arg1)
}

// System mocks base method.
func (m *MockIntegrationRepository) System(arg0 context.Context) ([]malak.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "System", arg0)
	ret0, _ := ret[0].([]malak.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// System indicates an expected call of System.
func (mr *MockIntegrationRepositoryMockRecorder) System(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "System", reflect.TypeOf((*MockIntegrationRepository)(nil).System), arg0)
}

// ToggleEnabled mocks base method.
func (m *MockIntegrationRepository) ToggleEnabled(arg0 context.Context, arg1 *malak.WorkspaceIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleEnabled", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToggleEnabled indicates an expected call of ToggleEnabled.
func (mr *MockIntegrationRepositoryMockRecorder) ToggleEnabled(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleEnabled", reflect.TypeOf((*MockIntegrationRepository)(nil).ToggleEnabled), arg0, arg1)
}

// Update mocks base method.
func (m *MockIntegrationRepository) Update(arg0 context.Context, arg1 *malak.WorkspaceIntegration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIntegrationRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIntegrationRepository)(nil).Update), arg0, arg1)
}
