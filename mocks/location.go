// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/geolocation/location.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/geolocation/location.go -destination=mocks/location.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	netip "net/netip"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGeolocationService is a mock of GeolocationService interface.
type MockGeolocationService struct {
	ctrl     *gomock.Controller
	recorder *MockGeolocationServiceMockRecorder
	isgomock struct{}
}

// MockGeolocationServiceMockRecorder is the mock recorder for MockGeolocationService.
type MockGeolocationServiceMockRecorder struct {
	mock *MockGeolocationService
}

// NewMockGeolocationService creates a new mock instance.
func NewMockGeolocationService(ctrl *gomock.Controller) *MockGeolocationService {
	mock := &MockGeolocationService{ctrl: ctrl}
	mock.recorder = &MockGeolocationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeolocationService) EXPECT() *MockGeolocationServiceMockRecorder {
	return m.recorder
}

// FindByIP mocks base method.
func (m *MockGeolocationService) FindByIP(arg0 context.Context, arg1 netip.Addr) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIP", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByIP indicates an expected call of FindByIP.
func (mr *MockGeolocationServiceMockRecorder) FindByIP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIP", reflect.TypeOf((*MockGeolocationService)(nil).FindByIP), arg0, arg1)
}
