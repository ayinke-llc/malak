// Code generated by MockGen. DO NOT EDIT.
// Source: contact_list.go
//
// Generated by this command:
//
//	mockgen -source=contact_list.go -destination=mocks/contact_list.go -package=malak_mocks
//

// Package malak_mocks is a generated GoMock package.
package malak_mocks

import (
	context "context"
	reflect "reflect"

	malak "github.com/ayinke-llc/malak"
	gomock "go.uber.org/mock/gomock"
)

// MockContactListRepository is a mock of ContactListRepository interface.
type MockContactListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContactListRepositoryMockRecorder
	isgomock struct{}
}

// MockContactListRepositoryMockRecorder is the mock recorder for MockContactListRepository.
type MockContactListRepositoryMockRecorder struct {
	mock *MockContactListRepository
}

// NewMockContactListRepository creates a new mock instance.
func NewMockContactListRepository(ctrl *gomock.Controller) *MockContactListRepository {
	mock := &MockContactListRepository{ctrl: ctrl}
	mock.recorder = &MockContactListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContactListRepository) EXPECT() *MockContactListRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockContactListRepository) Add(arg0 context.Context, arg1 *malak.ContactListMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockContactListRepositoryMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockContactListRepository)(nil).Add), arg0, arg1)
}

// Create mocks base method.
func (m *MockContactListRepository) Create(arg0 context.Context, arg1 *malak.ContactList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContactListRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContactListRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockContactListRepository) Delete(arg0 context.Context, arg1 *malak.ContactList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContactListRepositoryMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContactListRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockContactListRepository) Get(arg0 context.Context, arg1 malak.FetchContactListOptions) (*malak.ContactList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*malak.ContactList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContactListRepositoryMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContactListRepository)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockContactListRepository) List(arg0 context.Context, arg1 *malak.ContactListOptions) ([]malak.ContactList, []malak.ContactListMappingWithContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]malak.ContactList)
	ret1, _ := ret[1].([]malak.ContactListMappingWithContact)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockContactListRepositoryMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContactListRepository)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockContactListRepository) Update(arg0 context.Context, arg1 *malak.ContactList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContactListRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContactListRepository)(nil).Update), arg0, arg1)
}
