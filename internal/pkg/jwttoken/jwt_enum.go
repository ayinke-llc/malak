// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package jwttoken

import (
	"errors"
	"fmt"
)

const (
	// PurposeAccess is a Purpose of type Access.
	PurposeAccess Purpose = iota
	// PurposeRefresh is a Purpose of type Refresh.
	PurposeRefresh
)

var ErrInvalidPurpose = errors.New("not a valid Purpose")

const _PurposeName = "accessrefresh"

var _PurposeMap = map[Purpose]string{
	PurposeAccess:  _PurposeName[0:6],
	PurposeRefresh: _PurposeName[6:13],
}

// String implements the Stringer interface.
func (x Purpose) String() string {
	if str, ok := _PurposeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Purpose(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Purpose) IsValid() bool {
	_, ok := _PurposeMap[x]
	return ok
}

var _PurposeValue = map[string]Purpose{
	_PurposeName[0:6]:  PurposeAccess,
	_PurposeName[6:13]: PurposeRefresh,
}

// ParsePurpose attempts to convert a string to a Purpose.
func ParsePurpose(name string) (Purpose, error) {
	if x, ok := _PurposeValue[name]; ok {
		return x, nil
	}
	return Purpose(0), fmt.Errorf("%s is %w", name, ErrInvalidPurpose)
}
