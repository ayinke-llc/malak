// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/jwttoken/jwt.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/jwttoken/jwt.go -destination=internal/pkg/jwttoken/mocks/token.go
//

// Package mock_jwttoken is a generated GoMock package.
package mock_jwttoken

import (
	reflect "reflect"

	jwttoken "github.com/ayinke-llc/malak/internal/pkg/jwttoken"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTokenManager is a mock of JWTokenManager interface.
type MockJWTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockJWTokenManagerMockRecorder
}

// MockJWTokenManagerMockRecorder is the mock recorder for MockJWTokenManager.
type MockJWTokenManagerMockRecorder struct {
	mock *MockJWTokenManager
}

// NewMockJWTokenManager creates a new mock instance.
func NewMockJWTokenManager(ctrl *gomock.Controller) *MockJWTokenManager {
	mock := &MockJWTokenManager{ctrl: ctrl}
	mock.recorder = &MockJWTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTokenManager) EXPECT() *MockJWTokenManagerMockRecorder {
	return m.recorder
}

// GenerateJWToken mocks base method.
func (m *MockJWTokenManager) GenerateJWToken(arg0 jwttoken.JWTokenData) (jwttoken.JWTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWToken", arg0)
	ret0, _ := ret[0].(jwttoken.JWTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWToken indicates an expected call of GenerateJWToken.
func (mr *MockJWTokenManagerMockRecorder) GenerateJWToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWToken", reflect.TypeOf((*MockJWTokenManager)(nil).GenerateJWToken), arg0)
}

// ParseJWToken mocks base method.
func (m *MockJWTokenManager) ParseJWToken(arg0 string) (jwttoken.JWTokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWToken", arg0)
	ret0, _ := ret[0].(jwttoken.JWTokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWToken indicates an expected call of ParseJWToken.
func (mr *MockJWTokenManagerMockRecorder) ParseJWToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWToken", reflect.TypeOf((*MockJWTokenManager)(nil).ParseJWToken), arg0)
}
