// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/socialauth/social.go
//
// Generated by this command:
//
//	mockgen -source=internal/pkg/socialauth/social.go -destination=internal/pkg/socialauth/mocks/social.go -package=socialauth_mocks
//

// Package socialauth_mocks is a generated GoMock package.
package socialauth_mocks

import (
	context "context"
	reflect "reflect"

	socialauth "github.com/ayinke-llc/malak/internal/pkg/socialauth"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockSocialAuthProvider is a mock of SocialAuthProvider interface.
type MockSocialAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSocialAuthProviderMockRecorder
}

// MockSocialAuthProviderMockRecorder is the mock recorder for MockSocialAuthProvider.
type MockSocialAuthProviderMockRecorder struct {
	mock *MockSocialAuthProvider
}

// NewMockSocialAuthProvider creates a new mock instance.
func NewMockSocialAuthProvider(ctrl *gomock.Controller) *MockSocialAuthProvider {
	mock := &MockSocialAuthProvider{ctrl: ctrl}
	mock.recorder = &MockSocialAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocialAuthProvider) EXPECT() *MockSocialAuthProviderMockRecorder {
	return m.recorder
}

// User mocks base method.
func (m *MockSocialAuthProvider) User(arg0 context.Context, arg1 *oauth2.Token) (socialauth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1)
	ret0, _ := ret[0].(socialauth.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockSocialAuthProviderMockRecorder) User(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSocialAuthProvider)(nil).User), arg0, arg1)
}

// Validate mocks base method.
func (m *MockSocialAuthProvider) Validate(arg0 context.Context, arg1 socialauth.ValidateOptions) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockSocialAuthProviderMockRecorder) Validate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSocialAuthProvider)(nil).Validate), arg0, arg1)
}
