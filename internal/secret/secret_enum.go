// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package secret

import (
	"errors"
	"fmt"
)

const (
	// SecretProviderHashicorpVault is a SecretProvider of type hashicorp_vault.
	SecretProviderHashicorpVault SecretProvider = "hashicorp_vault"
	// SecretProviderInfisical is a SecretProvider of type infisical.
	SecretProviderInfisical SecretProvider = "infisical"
	// SecretProviderAesGcm is a SecretProvider of type aes_gcm.
	SecretProviderAesGcm SecretProvider = "aes_gcm"
)

var ErrInvalidSecretProvider = errors.New("not a valid SecretProvider")

// String implements the Stringer interface.
func (x SecretProvider) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SecretProvider) IsValid() bool {
	_, err := ParseSecretProvider(string(x))
	return err == nil
}

var _SecretProviderValue = map[string]SecretProvider{
	"hashicorp_vault": SecretProviderHashicorpVault,
	"infisical":       SecretProviderInfisical,
	"aes_gcm":         SecretProviderAesGcm,
}

// ParseSecretProvider attempts to convert a string to a SecretProvider.
func ParseSecretProvider(name string) (SecretProvider, error) {
	if x, ok := _SecretProviderValue[name]; ok {
		return x, nil
	}
	return SecretProvider(""), fmt.Errorf("%s is %w", name, ErrInvalidSecretProvider)
}
