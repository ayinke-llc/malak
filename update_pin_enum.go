// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// PinStatePin is a PinState of type Pin.
	PinStatePin PinState = iota
	// PinStateUnpin is a PinState of type Unpin.
	PinStateUnpin
)

var ErrInvalidPinState = errors.New("not a valid PinState")

const _PinStateName = "pinunpin"

var _PinStateMap = map[PinState]string{
	PinStatePin:   _PinStateName[0:3],
	PinStateUnpin: _PinStateName[3:8],
}

// String implements the Stringer interface.
func (x PinState) String() string {
	if str, ok := _PinStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("PinState(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PinState) IsValid() bool {
	_, ok := _PinStateMap[x]
	return ok
}

var _PinStateValue = map[string]PinState{
	_PinStateName[0:3]: PinStatePin,
	_PinStateName[3:8]: PinStateUnpin,
}

// ParsePinState attempts to convert a string to a PinState.
func ParsePinState(name string) (PinState, error) {
	if x, ok := _PinStateValue[name]; ok {
		return x, nil
	}
	return PinState(0), fmt.Errorf("%s is %w", name, ErrInvalidPinState)
}
