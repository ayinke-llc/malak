// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// DashboardChartTypeBarchart is a DashboardChartType of type Barchart.
	DashboardChartTypeBarchart DashboardChartType = iota
	// DashboardChartTypePiechart is a DashboardChartType of type Piechart.
	DashboardChartTypePiechart
)

var ErrInvalidDashboardChartType = errors.New("not a valid DashboardChartType")

const _DashboardChartTypeName = "barchartpiechart"

var _DashboardChartTypeMap = map[DashboardChartType]string{
	DashboardChartTypeBarchart: _DashboardChartTypeName[0:8],
	DashboardChartTypePiechart: _DashboardChartTypeName[8:16],
}

// String implements the Stringer interface.
func (x DashboardChartType) String() string {
	if str, ok := _DashboardChartTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DashboardChartType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DashboardChartType) IsValid() bool {
	_, ok := _DashboardChartTypeMap[x]
	return ok
}

var _DashboardChartTypeValue = map[string]DashboardChartType{
	_DashboardChartTypeName[0:8]:  DashboardChartTypeBarchart,
	_DashboardChartTypeName[8:16]: DashboardChartTypePiechart,
}

// ParseDashboardChartType attempts to convert a string to a DashboardChartType.
func ParseDashboardChartType(name string) (DashboardChartType, error) {
	if x, ok := _DashboardChartTypeValue[name]; ok {
		return x, nil
	}
	return DashboardChartType(0), fmt.Errorf("%s is %w", name, ErrInvalidDashboardChartType)
}
