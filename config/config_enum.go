// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package config

import (
	"errors"
	"fmt"
)

const (
	// DatabaseTypePostgres is a DatabaseType of type postgres.
	DatabaseTypePostgres DatabaseType = "postgres"
)

var ErrInvalidDatabaseType = errors.New("not a valid DatabaseType")

// String implements the Stringer interface.
func (x DatabaseType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DatabaseType) IsValid() bool {
	_, err := ParseDatabaseType(string(x))
	return err == nil
}

var _DatabaseTypeValue = map[string]DatabaseType{
	"postgres": DatabaseTypePostgres,
}

// ParseDatabaseType attempts to convert a string to a DatabaseType.
func ParseDatabaseType(name string) (DatabaseType, error) {
	if x, ok := _DatabaseTypeValue[name]; ok {
		return x, nil
	}
	return DatabaseType(""), fmt.Errorf("%s is %w", name, ErrInvalidDatabaseType)
}

const (
	// LogModeProd is a LogMode of type prod.
	LogModeProd LogMode = "prod"
	// LogModeDev is a LogMode of type dev.
	LogModeDev LogMode = "dev"
)

var ErrInvalidLogMode = errors.New("not a valid LogMode")

// String implements the Stringer interface.
func (x LogMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogMode) IsValid() bool {
	_, err := ParseLogMode(string(x))
	return err == nil
}

var _LogModeValue = map[string]LogMode{
	"prod": LogModeProd,
	"dev":  LogModeDev,
}

// ParseLogMode attempts to convert a string to a LogMode.
func ParseLogMode(name string) (LogMode, error) {
	if x, ok := _LogModeValue[name]; ok {
		return x, nil
	}
	return LogMode(""), fmt.Errorf("%s is %w", name, ErrInvalidLogMode)
}

const (
	// RateLimiterTypeMemory is a RateLimiterType of type memory.
	RateLimiterTypeMemory RateLimiterType = "memory"
)

var ErrInvalidRateLimiterType = errors.New("not a valid RateLimiterType")

// String implements the Stringer interface.
func (x RateLimiterType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RateLimiterType) IsValid() bool {
	_, err := ParseRateLimiterType(string(x))
	return err == nil
}

var _RateLimiterTypeValue = map[string]RateLimiterType{
	"memory": RateLimiterTypeMemory,
}

// ParseRateLimiterType attempts to convert a string to a RateLimiterType.
func ParseRateLimiterType(name string) (RateLimiterType, error) {
	if x, ok := _RateLimiterTypeValue[name]; ok {
		return x, nil
	}
	return RateLimiterType(""), fmt.Errorf("%s is %w", name, ErrInvalidRateLimiterType)
}

const (
	// UploadDriverS3 is a UploadDriver of type s3.
	UploadDriverS3 UploadDriver = "s3"
)

var ErrInvalidUploadDriver = errors.New("not a valid UploadDriver")

// String implements the Stringer interface.
func (x UploadDriver) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UploadDriver) IsValid() bool {
	_, err := ParseUploadDriver(string(x))
	return err == nil
}

var _UploadDriverValue = map[string]UploadDriver{
	"s3": UploadDriverS3,
}

// ParseUploadDriver attempts to convert a string to a UploadDriver.
func ParseUploadDriver(name string) (UploadDriver, error) {
	if x, ok := _UploadDriverValue[name]; ok {
		return x, nil
	}
	return UploadDriver(""), fmt.Errorf("%s is %w", name, ErrInvalidUploadDriver)
}
