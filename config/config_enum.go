// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package config

import (
	"errors"
	"fmt"
)

const (
	// DatabaseTypePostgres is a DatabaseType of type postgres.
	DatabaseTypePostgres DatabaseType = "postgres"
)

var ErrInvalidDatabaseType = errors.New("not a valid DatabaseType")

// String implements the Stringer interface.
func (x DatabaseType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x DatabaseType) IsValid() bool {
	_, err := ParseDatabaseType(string(x))
	return err == nil
}

var _DatabaseTypeValue = map[string]DatabaseType{
	"postgres": DatabaseTypePostgres,
}

// ParseDatabaseType attempts to convert a string to a DatabaseType.
func ParseDatabaseType(name string) (DatabaseType, error) {
	if x, ok := _DatabaseTypeValue[name]; ok {
		return x, nil
	}
	return DatabaseType(""), fmt.Errorf("%s is %w", name, ErrInvalidDatabaseType)
}

const (
	// LogFormatJson is a LogFormat of type json.
	LogFormatJson LogFormat = "json"
	// LogFormatText is a LogFormat of type text.
	LogFormatText LogFormat = "text"
)

var ErrInvalidLogFormat = errors.New("not a valid LogFormat")

// String implements the Stringer interface.
func (x LogFormat) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogFormat) IsValid() bool {
	_, err := ParseLogFormat(string(x))
	return err == nil
}

var _LogFormatValue = map[string]LogFormat{
	"json": LogFormatJson,
	"text": LogFormatText,
}

// ParseLogFormat attempts to convert a string to a LogFormat.
func ParseLogFormat(name string) (LogFormat, error) {
	if x, ok := _LogFormatValue[name]; ok {
		return x, nil
	}
	return LogFormat(""), fmt.Errorf("%s is %w", name, ErrInvalidLogFormat)
}

const (
	// RateLimiterTypeRedis is a RateLimiterType of type redis.
	RateLimiterTypeRedis RateLimiterType = "redis"
	// RateLimiterTypeMemory is a RateLimiterType of type memory.
	RateLimiterTypeMemory RateLimiterType = "memory"
)

var ErrInvalidRateLimiterType = errors.New("not a valid RateLimiterType")

// String implements the Stringer interface.
func (x RateLimiterType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RateLimiterType) IsValid() bool {
	_, err := ParseRateLimiterType(string(x))
	return err == nil
}

var _RateLimiterTypeValue = map[string]RateLimiterType{
	"redis":  RateLimiterTypeRedis,
	"memory": RateLimiterTypeMemory,
}

// ParseRateLimiterType attempts to convert a string to a RateLimiterType.
func ParseRateLimiterType(name string) (RateLimiterType, error) {
	if x, ok := _RateLimiterTypeValue[name]; ok {
		return x, nil
	}
	return RateLimiterType(""), fmt.Errorf("%s is %w", name, ErrInvalidRateLimiterType)
}
