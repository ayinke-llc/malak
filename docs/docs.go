// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ayinke Ventures",
            "email": "lanre@ayinke.ventures"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/connect/{provider}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in with a social login provider",
                "parameters": [
                    {
                        "description": "auth exchange data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.authenticateUserRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "oauth2 provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.createdUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Fetch current user. This api should also double as a token validation api",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.createdUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    }
                }
            }
        },
        "/workspaces": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "workspace"
                ],
                "summary": "Create a new workspace",
                "parameters": [
                    {
                        "description": "request body to create a workspace",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.createWorkspaceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/server.fetchWorkspaceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/server.APIStatus"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "malak.PlanMetadata": {
            "type": "object",
            "required": [
                "team"
            ],
            "properties": {
                "team": {
                    "type": "object",
                    "required": [
                        "enabled",
                        "size"
                    ],
                    "properties": {
                        "enabled": {
                            "type": "boolean"
                        },
                        "size": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "malak.Role": {
            "type": "string",
            "enum": [
                "admin",
                "member",
                "billing"
            ],
            "x-enum-varnames": [
                "RoleAdmin",
                "RoleMember",
                "RoleBilling"
            ]
        },
        "malak.User": {
            "type": "object",
            "required": [
                "created_at",
                "email",
                "full_name",
                "id",
                "metadata",
                "roles",
                "updated_at"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/malak.UserMetadata"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/malak.UserRole"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "malak.UserMetadata": {
            "type": "object",
            "required": [
                "current_workspace"
            ],
            "properties": {
                "current_workspace": {
                    "description": "Used to keep track of the last used workspace\nIn the instance of multiple workspaces\nSo when next the user logs in, we remember and take them to the\nright place rather than always a list of all their workspaces and they\nhave to select one",
                    "type": "string"
                }
            }
        },
        "malak.UserRole": {
            "type": "object",
            "required": [
                "created_at",
                "id",
                "role",
                "updated_at",
                "user_id",
                "workspace_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/malak.Role"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "string"
                }
            }
        },
        "malak.Workspace": {
            "type": "object",
            "required": [
                "created_at",
                "id",
                "metadata",
                "plan_id",
                "stripe_customer_id",
                "subscription_id",
                "updated_at",
                "workspace_name"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/malak.PlanMetadata"
                },
                "plan_id": {
                    "type": "string"
                },
                "stripe_customer_id": {
                    "description": "Not required\nDummy values work really",
                    "type": "string"
                },
                "subscription_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_name": {
                    "type": "string"
                }
            }
        },
        "server.APIStatus": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "description": "Generic message that tells you the status of the operation",
                    "type": "string"
                }
            }
        },
        "server.authenticateUserRequest": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "server.createWorkspaceRequest": {
            "type": "object"
        },
        "server.createdUserResponse": {
            "type": "object",
            "required": [
                "message",
                "token",
                "user"
            ],
            "properties": {
                "message": {
                    "description": "Generic message that tells you the status of the operation",
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/malak.User"
                }
            }
        },
        "server.fetchWorkspaceResponse": {
            "type": "object",
            "required": [
                "message",
                "workspace"
            ],
            "properties": {
                "message": {
                    "description": "Generic message that tells you the status of the operation",
                    "type": "string"
                },
                "workspace": {
                    "$ref": "#/definitions/malak.Workspace"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:5300",
	BasePath:         "/v1",
	Schemes:          []string{"http"},
	Title:            "Malak's API documentation",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
