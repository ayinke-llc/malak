// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// EntityTypeWorkspace is a EntityType of type workspace.
	EntityTypeWorkspace EntityType = "workspace"
	// EntityTypeInvoice is a EntityType of type invoice.
	EntityTypeInvoice EntityType = "invoice"
	// EntityTypeTeam is a EntityType of type team.
	EntityTypeTeam EntityType = "team"
	// EntityTypeInvite is a EntityType of type invite.
	EntityTypeInvite EntityType = "invite"
	// EntityTypeContact is a EntityType of type contact.
	EntityTypeContact EntityType = "contact"
	// EntityTypeDeck is a EntityType of type deck.
	EntityTypeDeck EntityType = "deck"
	// EntityTypeUpdate is a EntityType of type update.
	EntityTypeUpdate EntityType = "update"
)

var ErrInvalidEntityType = errors.New("not a valid EntityType")

// String implements the Stringer interface.
func (x EntityType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EntityType) IsValid() bool {
	_, err := ParseEntityType(string(x))
	return err == nil
}

var _EntityTypeValue = map[string]EntityType{
	"workspace": EntityTypeWorkspace,
	"invoice":   EntityTypeInvoice,
	"team":      EntityTypeTeam,
	"invite":    EntityTypeInvite,
	"contact":   EntityTypeContact,
	"deck":      EntityTypeDeck,
	"update":    EntityTypeUpdate,
}

// ParseEntityType attempts to convert a string to a EntityType.
func ParseEntityType(name string) (EntityType, error) {
	if x, ok := _EntityTypeValue[name]; ok {
		return x, nil
	}
	return EntityType(""), fmt.Errorf("%s is %w", name, ErrInvalidEntityType)
}
