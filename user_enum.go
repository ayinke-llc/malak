// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// RoleAdmin is a Role of type admin.
	RoleAdmin Role = "admin"
	// RoleMember is a Role of type member.
	RoleMember Role = "member"
	// RoleBilling is a Role of type billing.
	RoleBilling Role = "billing"
	// RoleInvestor is a Role of type investor.
	RoleInvestor Role = "investor"
	// RoleGuest is a Role of type guest.
	RoleGuest Role = "guest"
)

var ErrInvalidRole = errors.New("not a valid Role")

// String implements the Stringer interface.
func (x Role) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, err := ParseRole(string(x))
	return err == nil
}

var _RoleValue = map[string]Role{
	"admin":    RoleAdmin,
	"member":   RoleMember,
	"billing":  RoleBilling,
	"investor": RoleInvestor,
	"guest":    RoleGuest,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(""), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}
