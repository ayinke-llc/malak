// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// ContactTitleMr is a ContactTitle of type mr.
	ContactTitleMr ContactTitle = "mr"
	// ContactTitleMrs is a ContactTitle of type mrs.
	ContactTitleMrs ContactTitle = "mrs"
	// ContactTitleMiss is a ContactTitle of type miss.
	ContactTitleMiss ContactTitle = "miss"
	// ContactTitleDoctor is a ContactTitle of type doctor.
	ContactTitleDoctor ContactTitle = "doctor"
	// ContactTitleChief is a ContactTitle of type chief.
	ContactTitleChief ContactTitle = "chief"
)

var ErrInvalidContactTitle = errors.New("not a valid ContactTitle")

// String implements the Stringer interface.
func (x ContactTitle) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ContactTitle) IsValid() bool {
	_, err := ParseContactTitle(string(x))
	return err == nil
}

var _ContactTitleValue = map[string]ContactTitle{
	"mr":     ContactTitleMr,
	"mrs":    ContactTitleMrs,
	"miss":   ContactTitleMiss,
	"doctor": ContactTitleDoctor,
	"chief":  ContactTitleChief,
}

// ParseContactTitle attempts to convert a string to a ContactTitle.
func ParseContactTitle(name string) (ContactTitle, error) {
	if x, ok := _ContactTitleValue[name]; ok {
		return x, nil
	}
	return ContactTitle(""), fmt.Errorf("%s is %w", name, ErrInvalidContactTitle)
}
