components:
  schemas:
    malak.Contact:
      properties:
        city:
          type: string
        company:
          type: string
        created_at:
          type: string
        created_by:
          description: User who added/created this contact
          type: string
        email:
          type: string
        first_name:
          type: string
        id:
          type: string
        last_name:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.CustomContactMetadata'
        notes:
          type: string
        owner_id:
          description: |-
            User who owns the contact.
            Does not mean who added the contact but who chases
            or follows up officially with the contact
          type: string
        phone:
          type: string
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.CustomContactMetadata:
      additionalProperties:
        type: string
      type: object
    malak.PlanMetadata:
      properties:
        team:
          properties:
            enabled:
              type: boolean
            size:
              type: integer
          type: object
      type: object
    malak.Role:
      enum:
      - admin
      - member
      - billing
      - investor
      - guest
      type: string
      x-enum-varnames:
      - RoleAdmin
      - RoleMember
      - RoleBilling
      - RoleInvestor
      - RoleGuest
    malak.Update:
      properties:
        content:
          type: string
        created_at:
          type: string
        created_by:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.UpdateMetadata'
        reference:
          type: string
        sent_at:
          type: string
        sent_by:
          type: string
        status:
          $ref: '#/components/schemas/malak.UpdateStatus'
        title:
          description: |-
            Not persisted at all
            Only calculated at runtime
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.UpdateMetadata:
      type: object
    malak.UpdateStatus:
      enum:
      - draft
      - sent
      type: string
      x-enum-varnames:
      - UpdateStatusDraft
      - UpdateStatusSent
    malak.User:
      properties:
        created_at:
          type: string
        email:
          type: string
        full_name:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.UserMetadata'
        roles:
          items:
            $ref: '#/components/schemas/malak.UserRole'
          type: array
        updated_at:
          type: string
      type: object
    malak.UserMetadata:
      properties:
        current_workspace:
          description: |-
            Used to keep track of the last used workspace
            In the instance of multiple workspaces
            So when next the user logs in, we remember and take them to the
            right place rather than always a list of all their workspaces and they
            have to select one
          type: string
      type: object
    malak.UserRole:
      properties:
        created_at:
          type: string
        id:
          type: string
        role:
          $ref: '#/components/schemas/malak.Role'
        updated_at:
          type: string
        user_id:
          type: string
        workspace_id:
          type: string
      type: object
    malak.Workspace:
      properties:
        created_at:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.PlanMetadata'
        plan_id:
          type: string
        reference:
          type: string
        stripe_customer_id:
          description: |-
            Not required
            Dummy values work really
          type: string
        subscription_id:
          type: string
        updated_at:
          type: string
        workspace_name:
          type: string
      type: object
    server.APIStatus:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    server.authenticateUserRequest:
      properties:
        code:
          type: string
      required:
      - code
      type: object
    server.contentUpdateRequest:
      properties:
        update:
          type: string
      required:
      - update
      type: object
    server.createContactRequest:
      properties:
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
      type: object
    server.createWorkspaceRequest:
      properties:
        name:
          type: string
      type: object
    server.createdUpdateResponse:
      properties:
        message:
          type: string
        update:
          $ref: '#/components/schemas/malak.Update'
      required:
      - message
      - update
      type: object
    server.createdUserResponse:
      properties:
        current_workspace:
          $ref: '#/components/schemas/malak.Workspace'
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/malak.User'
        workspaces:
          items:
            $ref: '#/components/schemas/malak.Workspace'
          type: array
      required:
      - message
      - token
      - user
      - workspaces
      type: object
    server.fetchContactResponse:
      properties:
        contact:
          $ref: '#/components/schemas/malak.Contact'
        message:
          type: string
      required:
      - contact
      - message
      type: object
    server.fetchWorkspaceResponse:
      properties:
        message:
          type: string
        workspace:
          $ref: '#/components/schemas/malak.Workspace'
      required:
      - message
      - workspace
      type: object
    server.listUpdateResponse:
      properties:
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
        updates:
          items:
            $ref: '#/components/schemas/malak.Update'
          type: array
      required:
      - message
      - meta
      - updates
      type: object
    server.meta:
      properties:
        paging:
          $ref: '#/components/schemas/server.pagingInfo'
      required:
      - paging
      type: object
    server.pagingInfo:
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
      required:
      - page
      - per_page
      - total
      type: object
    server.uploadImageResponse:
      properties:
        message:
          type: string
        url:
          type: string
      required:
      - message
      - url
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
info:
  contact:
    email: lanre@ayinke.ventures
    name: Ayinke Ventures
  title: Malak's API documentation
  version: 0.1.0
openapi: 3.0.3
paths:
  /auth/connect/{provider}:
    post:
      parameters:
      - description: oauth2 provider
        in: path
        name: provider
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.authenticateUserRequest'
        description: auth exchange data
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Sign in with a social login provider
      tags:
      - auth
  /contacts:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createContactRequest'
        description: contact request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Creates a new contact
      tags:
      - contacts
  /images/upload:
    post:
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            schema:
              properties:
                image_body:
                  description: image body
                  format: binary
                  type: string
                  x-formData-name: image_body
              required:
              - image_body
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.uploadImageResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Upload an image
      tags:
      - images
  /user:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Fetch current user. This api should also double as a token validation
        api
      tags:
      - user
  /workspaces:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createWorkspaceRequest'
        description: request body to create a workspace
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchWorkspaceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Create a new workspace
      tags:
      - workspace
  /workspaces/{reference}:
    post:
      operationId: switchworkspace
      parameters:
      - description: Workspace unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchWorkspaceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Switch current workspace
      tags:
      - workspace
  /workspaces/updates:
    get:
      parameters:
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      - description: filter results by the status of the update.
        in: query
        name: status
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: List updates
      tags:
      - updates
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Create a new update
      tags:
      - updates
  /workspaces/updates/{reference}:
    delete:
      operationId: deleteUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Delete a specific update
      tags:
      - updates
    post:
      operationId: updateContent
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.contentUpdateRequest'
        description: update content body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Update a specific update
      tags:
      - updates
  /workspaces/updates/{reference}/duplicate:
    post:
      operationId: duplicateUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      summary: Duplicate a specific update
      tags:
      - updates
servers:
- url: http://localhost:5300/v1
