components:
  schemas:
    malak.BillingPreferences:
      properties:
        finance_email:
          type: string
      type: object
    malak.Block:
      properties:
        children:
          items:
            $ref: '#/components/schemas/malak.Block'
          type: array
        content: {}
        id:
          type: string
        props:
          additionalProperties: true
          type: object
        type:
          type: string
      type: object
    malak.CommunicationPreferences:
      properties:
        enable_marketing:
          type: boolean
        enable_product_updates:
          type: boolean
      type: object
    malak.Contact:
      properties:
        city:
          description: Legacy lmao. should be address but migrations bit ugh :))
          type: string
        company:
          type: string
        created_at:
          type: string
        created_by:
          description: User who added/created this contact
          type: string
        email:
          type: string
        first_name:
          type: string
        id:
          type: string
        last_name:
          type: string
        lists:
          items:
            $ref: '#/components/schemas/malak.ContactListMapping'
          type: array
        metadata:
          $ref: '#/components/schemas/malak.CustomContactMetadata'
        notes:
          type: string
        owner_id:
          description: |-
            User who owns the contact.
            Does not mean who added the contact but who chases
            or follows up officially with the contact
          type: string
        phone:
          type: string
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.ContactList:
      properties:
        created_at:
          type: string
        created_by:
          type: string
        id:
          type: string
        reference:
          type: string
        title:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.ContactListMapping:
      properties:
        contact_id:
          type: string
        created_at:
          type: string
        created_by:
          type: string
        id:
          type: string
        list:
          $ref: '#/components/schemas/malak.ContactList'
        list_id:
          type: string
        reference:
          type: string
        updated_at:
          type: string
      type: object
    malak.ContactListMappingWithContact:
      properties:
        contact_id:
          type: string
        email:
          description: Contact fields
          type: string
        id:
          type: string
        list_id:
          type: string
        reference:
          type: string
      type: object
    malak.ContactShareItem:
      properties:
        contact_id:
          type: string
        created_at:
          type: string
        id:
          type: string
        item_id:
          type: string
        item_reference:
          type: string
        item_type:
          $ref: '#/components/schemas/malak.ContactShareItemType'
        reference:
          type: string
        shared_at:
          type: string
        shared_by:
          type: string
        title:
          type: string
        updated_at:
          type: string
      type: object
    malak.ContactShareItemType:
      enum:
      - update
      - dashboard
      - deck
      type: string
      x-enum-varnames:
      - ContactShareItemTypeUpdate
      - ContactShareItemTypeDashboard
      - ContactShareItemTypeDeck
    malak.CustomContactMetadata:
      additionalProperties:
        type: string
      type: object
    malak.Dashboard:
      properties:
        chart_count:
          type: integer
        created_at:
          type: string
        description:
          type: string
        id:
          type: string
        reference:
          type: string
        title:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.DashboardChart:
      properties:
        chart:
          $ref: '#/components/schemas/malak.IntegrationChart'
        chart_id:
          type: string
        created_at:
          type: string
        dashboard_id:
          type: string
        id:
          type: string
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
        workspace_integration_id:
          type: string
      type: object
    malak.DashboardChartPosition:
      properties:
        chart_id:
          type: string
        dashboard_id:
          type: string
        id:
          type: string
        order_index:
          type: integer
      type: object
    malak.DashboardLink:
      properties:
        contact:
          $ref: '#/components/schemas/malak.Contact'
        contact_id:
          type: string
        created_at:
          type: string
        dashboard:
          $ref: '#/components/schemas/malak.Dashboard'
        dashboard_id:
          type: string
        expires_at:
          type: string
        id:
          type: string
        link_type:
          $ref: '#/components/schemas/malak.DashboardLinkType'
        reference:
          type: string
        token:
          type: string
        updated_at:
          type: string
      type: object
    malak.DashboardLinkType:
      enum:
      - default
      - contact
      type: string
      x-enum-varnames:
      - DashboardLinkTypeDefault
      - DashboardLinkTypeContact
    malak.Deck:
      properties:
        created_at:
          type: string
        created_by:
          type: string
        deck_size:
          type: integer
        id:
          type: string
        is_archived:
          type: boolean
        is_pinned:
          type: boolean
        object_key:
          type: string
        preferences:
          $ref: '#/components/schemas/malak.DeckPreference'
        reference:
          type: string
        short_link:
          type: string
        title:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.DeckDailyEngagement:
      properties:
        created_at:
          type: string
        deck_id:
          type: string
        engagement_count:
          type: integer
        engagement_date:
          type: string
        id:
          type: string
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.DeckEngagementResponse:
      properties:
        daily_engagements:
          items:
            $ref: '#/components/schemas/malak.DeckDailyEngagement'
          type: array
        geographic_stats:
          items:
            $ref: '#/components/schemas/malak.DeckGeographicStat'
          type: array
      required:
      - daily_engagements
      - geographic_stats
      type: object
    malak.DeckGeographicStat:
      properties:
        country:
          type: string
        created_at:
          type: string
        deck_id:
          type: string
        id:
          type: string
        reference:
          type: string
        stat_date:
          type: string
        updated_at:
          type: string
        view_count:
          type: integer
      type: object
    malak.DeckPreference:
      properties:
        created_at:
          type: string
        created_by:
          type: string
        deck_id:
          type: string
        enable_downloading:
          type: boolean
        expires_at:
          type: string
        id:
          type: string
        password:
          $ref: '#/components/schemas/malak.PasswordDeckPreferences'
        reference:
          type: string
        require_email:
          type: boolean
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.DeckViewerSession:
      properties:
        browser:
          type: string
        city:
          type: string
        contact:
          $ref: '#/components/schemas/malak.Contact'
        contact_id:
          type: string
        country:
          type: string
        created_at:
          type: string
        deck_id:
          type: string
        device_info:
          type: string
        id:
          type: string
        ip_address:
          type: string
        os:
          type: string
        reference:
          type: string
        session_id:
          type: string
        time_spent_seconds:
          type: integer
        updated_at:
          type: string
        viewed_at:
          type: string
      type: object
    malak.Integration:
      properties:
        created_at:
          type: string
        description:
          type: string
        id:
          type: string
        integration_name:
          type: string
        integration_type:
          $ref: '#/components/schemas/malak.IntegrationType'
        is_enabled:
          type: boolean
        logo_url:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.IntegrationMetadata'
        reference:
          type: string
        updated_at:
          type: string
      type: object
    malak.IntegrationChart:
      properties:
        chart_type:
          $ref: '#/components/schemas/malak.IntegrationChartType'
        created_at:
          type: string
        id:
          type: string
        internal_name:
          $ref: '#/components/schemas/malak.IntegrationChartInternalNameType'
        metadata:
          $ref: '#/components/schemas/malak.IntegrationChartMetadata'
        reference:
          type: string
        updated_at:
          type: string
        user_facing_name:
          type: string
        workspace_id:
          type: string
        workspace_integration_id:
          type: string
      type: object
    malak.IntegrationChartInternalNameType:
      enum:
      - mercury_account
      - mercury_account_transaction
      - brex_account
      - brex_account_transaction
      type: string
      x-enum-varnames:
      - IntegrationChartInternalNameTypeMercuryAccount
      - IntegrationChartInternalNameTypeMercuryAccountTransaction
      - IntegrationChartInternalNameTypeBrexAccount
      - IntegrationChartInternalNameTypeBrexAccountTransaction
    malak.IntegrationChartMetadata:
      properties:
        provider_id:
          type: string
      type: object
    malak.IntegrationChartType:
      enum:
      - bar
      - pie
      type: string
      x-enum-varnames:
      - IntegrationChartTypeBar
      - IntegrationChartTypePie
    malak.IntegrationDataPoint:
      properties:
        created_at:
          type: string
        data_point_type:
          $ref: '#/components/schemas/malak.IntegrationDataPointType'
        id:
          type: string
        integration_chart_id:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.IntegrationDataPointMetadata'
        point_name:
          type: string
        point_value:
          type: integer
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
        workspace_integration_id:
          type: string
      type: object
    malak.IntegrationDataPointMetadata:
      type: object
    malak.IntegrationDataPointType:
      enum:
      - currency
      - others
      type: string
      x-enum-varnames:
      - IntegrationDataPointTypeCurrency
      - IntegrationDataPointTypeOthers
    malak.IntegrationMetadata:
      properties:
        endpoint:
          type: string
      type: object
    malak.IntegrationType:
      enum:
      - oauth2
      - api_key
      type: string
      x-enum-varnames:
      - IntegrationTypeOauth2
      - IntegrationTypeApiKey
    malak.PasswordDeckPreferences:
      properties:
        enabled:
          type: boolean
        password:
          type: string
      type: object
    malak.Plan:
      properties:
        amount:
          description: Defaults to zero
          type: integer
        created_at:
          type: string
        default_price_id:
          description: Stripe default price id. Again not needed if not using Stripe
          type: string
        id:
          type: string
        is_default:
          description: |-
            IsDefault if this is the default plan for the user to get signed up to
            on sign up

            Better to keep this here than to use config
          type: boolean
        metadata:
          $ref: '#/components/schemas/malak.PlanMetadata'
        plan_name:
          type: string
        reference:
          description: |-
            Can use a fake id really
            As this only matters if you turn on Stripe
          type: string
        updated_at:
          type: string
      type: object
    malak.PlanMetadata:
      properties:
        dashboard:
          properties:
            embed_dashboard:
              type: boolean
            max_charts_per_dashboard:
              type: integer
            share_dashboard_via_link:
              type: boolean
          type: object
        data_room:
          properties:
            share_via_link:
              type: boolean
            size:
              type: integer
          type: object
        deck:
          properties:
            analytics:
              properties:
                can_view_historical_sessions:
                  type: boolean
              type: object
            auto_terminate_link:
              type: boolean
            custom_domain:
              type: boolean
          type: object
        integrations:
          properties:
            available_for_use:
              type: integer
          type: object
        team:
          properties:
            size:
              type: integer
          type: object
        updates:
          properties:
            custom_domain:
              type: boolean
            max_recipients:
              type: integer
          type: object
      type: object
    malak.Preference:
      properties:
        billing:
          $ref: '#/components/schemas/malak.BillingPreferences'
        communication:
          $ref: '#/components/schemas/malak.CommunicationPreferences'
        created_at:
          type: string
        id:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.PublicDeck:
      properties:
        created_at:
          type: string
        deck_size:
          type: integer
        is_archived:
          type: boolean
        object_link:
          type: string
        preferences:
          $ref: '#/components/schemas/malak.PublicDeckPreference'
        reference:
          type: string
        session:
          $ref: '#/components/schemas/malak.DeckViewerSession'
        short_link:
          type: string
        title:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.PublicDeckPreference:
      properties:
        enable_downloading:
          type: boolean
        has_password:
          type: boolean
        require_email:
          type: boolean
      type: object
    malak.RecipientStatus:
      enum:
      - pending
      - sent
      - failed
      type: string
      x-enum-varnames:
      - RecipientStatusPending
      - RecipientStatusSent
      - RecipientStatusFailed
    malak.Role:
      enum:
      - admin
      - member
      - billing
      - investor
      - guest
      type: string
      x-enum-varnames:
      - RoleAdmin
      - RoleMember
      - RoleBilling
      - RoleInvestor
      - RoleGuest
    malak.SystemTemplate:
      properties:
        content:
          items:
            $ref: '#/components/schemas/malak.Block'
          type: array
        created_at:
          type: string
        description:
          type: string
        id:
          type: string
        number_of_uses:
          type: integer
        reference:
          type: string
        title:
          type: string
        updated_at:
          type: string
      type: object
    malak.Update:
      properties:
        content:
          items:
            $ref: '#/components/schemas/malak.Block'
          type: array
        created_at:
          type: string
        created_by:
          type: string
        id:
          type: string
        is_pinned:
          description: If this update is pinned
          type: boolean
        metadata:
          $ref: '#/components/schemas/malak.UpdateMetadata'
        reference:
          type: string
        sent_at:
          type: string
        sent_by:
          type: string
        status:
          $ref: '#/components/schemas/malak.UpdateStatus'
        title:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.UpdateMetadata:
      type: object
    malak.UpdateRecipient:
      properties:
        contact:
          $ref: '#/components/schemas/malak.Contact'
        contact_id:
          type: string
        created_at:
          type: string
        id:
          type: string
        reference:
          type: string
        schedule_id:
          type: string
        status:
          $ref: '#/components/schemas/malak.RecipientStatus'
        update_id:
          type: string
        update_recipient_stat:
          $ref: '#/components/schemas/malak.UpdateRecipientStat'
        updated_at:
          type: string
      type: object
    malak.UpdateRecipientStat:
      properties:
        created_at:
          type: string
        has_reaction:
          type: boolean
        id:
          type: string
        is_bounced:
          type: boolean
        is_delivered:
          type: boolean
        last_opened_at:
          type: string
        recipient:
          $ref: '#/components/schemas/malak.UpdateRecipient'
        recipient_id:
          type: string
        reference:
          type: string
        updated_at:
          type: string
      type: object
    malak.UpdateStat:
      properties:
        created_at:
          type: string
        id:
          type: string
        reference:
          type: string
        total_clicks:
          type: integer
        total_opens:
          type: integer
        total_reactions:
          type: integer
        total_sent:
          type: integer
        unique_opens:
          type: integer
        update_id:
          type: string
        updated_at:
          type: string
      type: object
    malak.UpdateStatus:
      enum:
      - draft
      - sent
      type: string
      x-enum-varnames:
      - UpdateStatusDraft
      - UpdateStatusSent
    malak.User:
      properties:
        created_at:
          type: string
        email:
          type: string
        full_name:
          type: string
        id:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.UserMetadata'
        roles:
          items:
            $ref: '#/components/schemas/malak.UserRole'
          type: array
        updated_at:
          type: string
      type: object
    malak.UserMetadata:
      properties:
        current_workspace:
          description: |-
            Used to keep track of the last used workspace
            In the instance of multiple workspaces
            So when next the user logs in, we remember and take them to the
            right place rather than always a list of all their workspaces and they
            have to select one
          type: string
      type: object
    malak.UserRole:
      properties:
        created_at:
          type: string
        id:
          type: string
        role:
          $ref: '#/components/schemas/malak.Role'
        updated_at:
          type: string
        user_id:
          type: string
        workspace_id:
          type: string
      type: object
    malak.Workspace:
      properties:
        created_at:
          type: string
        id:
          type: string
        is_subscription_active:
          type: boolean
        logo_url:
          type: string
        metadata:
          $ref: '#/components/schemas/malak.WorkspaceMetadata'
        plan:
          $ref: '#/components/schemas/malak.Plan'
        plan_id:
          type: string
        reference:
          type: string
        stripe_customer_id:
          description: |-
            Not required
            Dummy values work really if not using stripe
          type: string
        subscription_id:
          type: string
        timezone:
          type: string
        updated_at:
          type: string
        website:
          type: string
        workspace_name:
          type: string
      type: object
    malak.WorkspaceIntegration:
      properties:
        created_at:
          type: string
        id:
          type: string
        integration:
          $ref: '#/components/schemas/malak.Integration'
        integration_id:
          type: string
        is_active:
          description: IsActive determines if the connection to the integration has
            been tested and works
          type: boolean
        is_enabled:
          description: IsEnabled - this integration is enabled and data can be fetched
          type: boolean
        metadata:
          $ref: '#/components/schemas/malak.WorkspaceIntegrationMetadata'
        reference:
          type: string
        updated_at:
          type: string
        workspace_id:
          type: string
      type: object
    malak.WorkspaceIntegrationMetadata:
      properties:
        access_token:
          type: string
        last_fetched_at:
          type: string
      type: object
    malak.WorkspaceMetadata:
      type: object
    server.APIStatus:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    server.addChartToDashboardRequest:
      properties:
        chart_reference:
          type: string
      required:
      - chart_reference
      type: object
    server.addContactToListRequest:
      properties:
        reference:
          type: string
      type: object
    server.authenticateUserRequest:
      properties:
        code:
          type: string
      required:
      - code
      type: object
    server.contentUpdateRequest:
      properties:
        title:
          type: string
        update:
          items:
            $ref: '#/components/schemas/malak.Block'
          type: array
      required:
      - title
      - update
      type: object
    server.createContactListRequest:
      properties:
        name:
          type: string
      required:
      - name
      type: object
    server.createContactRequest:
      properties:
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
      type: object
    server.createDashboardRequest:
      properties:
        description:
          type: string
        title:
          type: string
      required:
      - description
      - title
      type: object
    server.createDeckRequest:
      properties:
        deck_url:
          type: string
        title:
          type: string
      type: object
    server.createDeckViewerSession:
      properties:
        browser:
          type: string
        device_info:
          type: string
        os:
          type: string
        password:
          type: string
      required:
      - browser
      - device_info
      - os
      - password
      type: object
    server.createUpdateContent:
      properties:
        template:
          properties:
            is_system_template:
              type: boolean
            reference:
              type: string
          type: object
        title:
          type: string
      required:
      - title
      type: object
    server.createWorkspaceRequest:
      properties:
        name:
          type: string
      required:
      - name
      type: object
    server.createdUpdateResponse:
      properties:
        message:
          type: string
        update:
          $ref: '#/components/schemas/malak.Update'
      required:
      - message
      - update
      type: object
    server.createdUserResponse:
      properties:
        current_workspace:
          $ref: '#/components/schemas/malak.Workspace'
        message:
          type: string
        token:
          type: string
        user:
          $ref: '#/components/schemas/malak.User'
        workspaces:
          items:
            $ref: '#/components/schemas/malak.Workspace'
          type: array
      required:
      - message
      - token
      - user
      - workspaces
      type: object
    server.editContactRequest:
      properties:
        address:
          type: string
        company:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        notes:
          type: string
      required:
      - address
      - company
      - notes
      type: object
    server.fetchBillingPortalResponse:
      properties:
        link:
          type: string
        message:
          type: string
      required:
      - link
      - message
      type: object
    server.fetchContactListResponse:
      properties:
        list:
          $ref: '#/components/schemas/malak.ContactList'
        message:
          type: string
      required:
      - list
      - message
      type: object
    server.fetchContactListsResponse:
      properties:
        lists:
          items:
            properties:
              list:
                $ref: '#/components/schemas/malak.ContactList'
              mappings:
                items:
                  $ref: '#/components/schemas/malak.ContactListMappingWithContact'
                type: array
            required:
            - list
            - mappings
            type: object
          type: array
        message:
          type: string
      required:
      - lists
      - message
      type: object
    server.fetchContactResponse:
      properties:
        contact:
          $ref: '#/components/schemas/malak.Contact'
        message:
          type: string
      required:
      - contact
      - message
      type: object
    server.fetchDashboardResponse:
      properties:
        dashboard:
          $ref: '#/components/schemas/malak.Dashboard'
        message:
          type: string
      required:
      - dashboard
      - message
      type: object
    server.fetchDeckResponse:
      properties:
        deck:
          $ref: '#/components/schemas/malak.Deck'
        message:
          type: string
      required:
      - deck
      - message
      type: object
    server.fetchDecksResponse:
      properties:
        decks:
          items:
            $ref: '#/components/schemas/malak.Deck'
          type: array
        message:
          type: string
      required:
      - decks
      - message
      type: object
    server.fetchDetailedContactResponse:
      properties:
        contact:
          $ref: '#/components/schemas/malak.Contact'
        message:
          type: string
        shared_items:
          items:
            $ref: '#/components/schemas/malak.ContactShareItem'
          type: array
      required:
      - contact
      - message
      - shared_items
      type: object
    server.fetchEngagementsResponse:
      properties:
        engagements:
          $ref: '#/components/schemas/malak.DeckEngagementResponse'
        message:
          type: string
      required:
      - engagements
      - message
      type: object
    server.fetchPublicDeckResponse:
      properties:
        deck:
          $ref: '#/components/schemas/malak.PublicDeck'
        message:
          type: string
      required:
      - deck
      - message
      type: object
    server.fetchSessionsDeck:
      properties:
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
        sessions:
          items:
            $ref: '#/components/schemas/malak.DeckViewerSession'
          type: array
      required:
      - message
      - meta
      - sessions
      type: object
    server.fetchTemplatesResponse:
      properties:
        message:
          type: string
        templates:
          properties:
            system:
              items:
                $ref: '#/components/schemas/malak.SystemTemplate'
              type: array
            workspace:
              items:
                $ref: '#/components/schemas/malak.SystemTemplate'
              type: array
          required:
          - system
          - workspace
          type: object
      required:
      - message
      - templates
      type: object
    server.fetchUpdateAnalyticsResponse:
      properties:
        message:
          type: string
        recipients:
          items:
            $ref: '#/components/schemas/malak.UpdateRecipient'
          type: array
        update:
          $ref: '#/components/schemas/malak.UpdateStat'
      required:
      - message
      - recipients
      - update
      type: object
    server.fetchUpdateReponse:
      properties:
        message:
          type: string
        update:
          $ref: '#/components/schemas/malak.Update'
      required:
      - message
      - update
      type: object
    server.fetchWorkspaceResponse:
      properties:
        message:
          type: string
        workspace:
          $ref: '#/components/schemas/malak.Workspace'
      required:
      - message
      - workspace
      type: object
    server.generateDashboardLinkRequest:
      properties:
        email:
          type: string
      type: object
    server.listChartDataPointsResponse:
      properties:
        data_points:
          items:
            $ref: '#/components/schemas/malak.IntegrationDataPoint'
          type: array
        message:
          type: string
      required:
      - data_points
      - message
      type: object
    server.listContactsResponse:
      properties:
        contacts:
          items:
            $ref: '#/components/schemas/malak.Contact'
          type: array
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
      required:
      - contacts
      - message
      - meta
      type: object
    server.listDashboardChartsResponse:
      properties:
        charts:
          items:
            $ref: '#/components/schemas/malak.DashboardChart'
          type: array
        dashboard:
          $ref: '#/components/schemas/malak.Dashboard'
        link:
          $ref: '#/components/schemas/malak.DashboardLink'
        message:
          type: string
        positions:
          items:
            $ref: '#/components/schemas/malak.DashboardChartPosition'
          type: array
      required:
      - charts
      - dashboard
      - link
      - message
      - positions
      type: object
    server.listDashboardLinkResponse:
      properties:
        links:
          items:
            $ref: '#/components/schemas/malak.DashboardLink'
          type: array
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
      required:
      - links
      - message
      - meta
      type: object
    server.listDashboardResponse:
      properties:
        dashboards:
          items:
            $ref: '#/components/schemas/malak.Dashboard'
          type: array
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
      required:
      - dashboards
      - message
      - meta
      type: object
    server.listIntegrationChartsResponse:
      properties:
        charts:
          items:
            $ref: '#/components/schemas/malak.IntegrationChart'
          type: array
        message:
          type: string
      required:
      - charts
      - message
      type: object
    server.listIntegrationResponse:
      properties:
        integrations:
          items:
            $ref: '#/components/schemas/malak.WorkspaceIntegration'
          type: array
        message:
          type: string
      required:
      - integrations
      - message
      type: object
    server.listUpdateResponse:
      properties:
        message:
          type: string
        meta:
          $ref: '#/components/schemas/server.meta'
        updates:
          items:
            $ref: '#/components/schemas/malak.Update'
          type: array
      required:
      - message
      - meta
      - updates
      type: object
    server.meta:
      properties:
        paging:
          $ref: '#/components/schemas/server.pagingInfo'
      required:
      - paging
      type: object
    server.pagingInfo:
      properties:
        page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
      required:
      - page
      - per_page
      - total
      type: object
    server.preferenceResponse:
      properties:
        message:
          type: string
        preferences:
          $ref: '#/components/schemas/malak.Preference'
      required:
      - message
      - preferences
      type: object
    server.previewUpdateRequest:
      properties:
        email:
          type: string
      required:
      - email
      type: object
    server.regenerateLinkResponse:
      properties:
        link:
          $ref: '#/components/schemas/malak.DashboardLink'
        message:
          type: string
      required:
      - link
      - message
      type: object
    server.sendUpdateRequest:
      properties:
        emails:
          items:
            type: string
          type: array
        send_at:
          type: integer
      type: object
    server.testAPIIntegrationRequest:
      properties:
        api_key:
          type: string
      required:
      - api_key
      type: object
    server.updateDashboardPositionsRequest:
      properties:
        positions:
          items:
            properties:
              chart_id:
                type: string
              index:
                type: integer
            required:
            - chart_id
            - index
            type: object
          type: array
      required:
      - positions
      type: object
    server.updateDeckPreferencesRequest:
      properties:
        enable_downloading:
          type: boolean
        password_protection:
          properties:
            enabled:
              type: boolean
            value:
              type: string
          type: object
        require_email:
          type: boolean
      type: object
    server.updatePreferencesRequest:
      properties:
        preferences:
          properties:
            billing:
              $ref: '#/components/schemas/malak.BillingPreferences'
            newsletter:
              $ref: '#/components/schemas/malak.CommunicationPreferences'
          required:
          - billing
          - newsletter
          type: object
      required:
      - preferences
      type: object
    server.updateWorkspaceRequest:
      properties:
        logo:
          type: string
        timezone:
          type: string
        website:
          type: string
        workspace_name:
          type: string
      type: object
    server.uploadImageResponse:
      properties:
        message:
          type: string
        url:
          type: string
      required:
      - message
      - url
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: Authorization
      type: apiKey
info:
  contact:
    email: lanre@ayinke.ventures
    name: Ayinke Ventures
  title: Malak's API documentation
  version: 0.1.0
openapi: 3.0.3
paths:
  /auth/connect/{provider}:
    post:
      description: Sign in with a social login provider
      parameters:
      - description: oauth2 provider
        in: path
        name: provider
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.authenticateUserRequest'
        description: auth exchange data
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - auth
  /contacts:
    get:
      description: list your contacts
      parameters:
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listContactsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    post:
      description: Creates a new contact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createContactRequest'
        description: contact request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
  /contacts/{reference}:
    delete:
      description: delete a contact
      operationId: deleteContact
      parameters:
      - description: contact unique reference.. e.g contact_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    get:
      description: fetch a contact by reference
      parameters:
      - description: contact unique reference.. e.g contact_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDetailedContactResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    put:
      description: edit a contact
      parameters:
      - description: contact unique reference.. e.g contact_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.editContactRequest'
        description: contact request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
  /contacts/lists:
    get:
      description: List all created contact lists
      operationId: fetchContactLists
      parameters:
      - description: show emails inside the list
        in: query
        name: include_emails
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactListsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    post:
      description: Create a new contact list
      operationId: createContactList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createContactListRequest'
        description: contact list body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactListResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
  /contacts/lists/{reference}:
    delete:
      description: delete a contact list
      operationId: deleteContactList
      parameters:
      - description: list unique reference.. e.g list_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    post:
      description: add a new contact to a list
      operationId: addEmailToContactList
      parameters:
      - description: list unique reference.. e.g list_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.addContactToListRequest'
        description: contact body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
    put:
      description: Edit a contact list
      operationId: editContactList
      parameters:
      - description: list unique reference.. e.g list_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createContactListRequest'
        description: contact list body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchContactListResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - contacts
  /dashboards:
    get:
      description: List dashboards
      parameters:
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listDashboardResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
    post:
      description: create a new dashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createDashboardRequest'
        description: dashboard request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDashboardResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}:
    get:
      description: fetch dashboard
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listDashboardChartsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}/access-control:
    get:
      description: list access controls
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listDashboardLinkResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}/access-control/{link_reference}:
    delete:
      description: delete access controls
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      - description: link unique reference.. e.g dashboard_link_
        in: path
        name: link_reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}/access-control/link:
    post:
      description: regenerate the default link for a dashboard
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.generateDashboardLinkRequest'
        description: Request body to generate link
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.regenerateLinkResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}/charts:
    delete:
      description: remove a chart from a dashboard
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.addChartToDashboardRequest'
        description: dashboard request chart data
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
    put:
      description: add a chart to a dashboard
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.addChartToDashboardRequest'
        description: dashboard request chart data
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/{reference}/positions:
    post:
      description: update dashboard chart positioning
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updateDashboardPositionsRequest'
        description: dashboard chart positions
        required: true
        x-originalParamName: message
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/charts:
    get:
      description: List charts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listIntegrationChartsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /dashboards/charts/{reference}:
    get:
      description: fetch charting data
      parameters:
      - description: chart unique reference.. e.g integration_chart_km31C.e6xV
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listChartDataPointsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /decks:
    get:
      description: list all decks. No pagination
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDecksResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
    post:
      description: Creates a new deck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createDeckRequest'
        description: deck request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}:
    delete:
      description: delete a deck
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
    get:
      description: fetch a deck
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}/analytics:
    get:
      description: fetch deck engagements and geographic stats
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchEngagementsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}/archive:
    post:
      description: toggle archive status of a deck
      operationId: toggleArchive
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}/pin:
    post:
      description: toggle pinned status of a deck
      operationId: togglePin
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}/preferences:
    put:
      description: update a deck preferences
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updateDeckPreferencesRequest'
        description: deck preferences request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /decks/{reference}/sessions:
    get:
      description: fetch deck viewing sessions on dashboard
      parameters:
      - description: deck unique reference.. e.g deck_
        in: path
        name: reference
        required: true
        schema:
          type: string
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      - description: number of days to fetch deck sessions
        in: query
        name: days
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchSessionsDeck'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /public/dashboards/{reference}:
    get:
      description: fetch public dashboard and charting data points
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listDashboardChartsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /public/dashboards/{reference}/charts/{chart_reference}:
    get:
      description: fetch charting data
      parameters:
      - description: dashboard unique reference.. e.g dashboard_
        in: path
        name: reference
        required: true
        schema:
          type: string
      - description: chart unique reference.. e.g integration_chart_km31C.e6xV
        in: path
        name: chart_reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listChartDataPointsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - dashboards
  /public/decks/{reference}:
    post:
      description: public api to fetch a deck
      parameters:
      - description: 'deck unique reference.. '
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createDeckViewerSession'
        description: deck session request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchPublicDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks-viewer
    put:
      description: update the session details
      parameters:
      - description: 'session unique reference.. '
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createDeckViewerSession'
        description: deck session request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchPublicDeckResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks-viewer
  /updates/react:
    get:
      description: Fetch a specific update
      operationId: reactPost
      parameters:
      - description: provider type
        in: query
        name: provider
        required: true
        schema:
          type: string
      - description: email id
        in: query
        name: email_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /uploads/decks:
    post:
      description: Upload a deck
      operationId: uploadDeck
      requestBody:
        content:
          application/json:
            schema:
              properties:
                image_body:
                  description: image body
                  format: binary
                  type: string
                  x-formData-name: image_body
              required:
              - image_body
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.uploadImageResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - decks
  /uploads/images:
    post:
      description: Upload an image
      operationId: uploadImage
      requestBody:
        content:
          application/json:
            schema:
              properties:
                image_body:
                  description: image body
                  format: binary
                  type: string
                  x-formData-name: image_body
              required:
              - image_body
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.uploadImageResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - images
  /user:
    get:
      description: Fetch current user. This api should also double as a token validation
        api
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUserResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - user
  /workspaces:
    patch:
      description: update workspace details
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updateWorkspaceRequest'
        description: request body to create a workspace
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchWorkspaceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - workspace
    post:
      description: Create a new workspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createWorkspaceRequest'
        description: request body to create a workspace
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchWorkspaceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - workspace
  /workspaces/billing:
    post:
      description: get billing portal
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchBillingPortalResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - billing
  /workspaces/integrations:
    get:
      description: fetch workspace preferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listIntegrationResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - integrations
  /workspaces/integrations/{reference}:
    delete:
      description: disable integration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - integrations
    post:
      description: enable integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.testAPIIntegrationRequest'
        description: request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - integrations
    put:
      description: update integration api key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.testAPIIntegrationRequest'
        description: request body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - integrations
  /workspaces/integrations/{reference}/ping:
    post:
      description: test an api key is valid and can reach the integration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.testAPIIntegrationRequest'
        description: request body to test an integration
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - integrations
  /workspaces/preferences:
    get:
      description: fetch workspace preferences
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.preferenceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - workspace
    put:
      description: update workspace preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.updatePreferencesRequest'
        description: request body to updare a workspace preference
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.preferenceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - workspace
  /workspaces/switch/{reference}:
    post:
      description: Switch current workspace
      operationId: switchworkspace
      parameters:
      - description: Workspace unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchWorkspaceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - workspace
  /workspaces/updates:
    get:
      description: List updates
      parameters:
      - description: Page to query data from. Defaults to 1
        in: query
        name: page
        schema:
          type: integer
      - description: Number to items to return. Defaults to 10 items
        in: query
        name: per_page
        schema:
          type: integer
      - description: filter results by the status of the update.
        in: query
        name: status
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
    post:
      description: Create a new update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.createUpdateContent'
        description: update content body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/{reference}:
    delete:
      description: Delete a specific update
      operationId: deleteUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
    get:
      description: Fetch a specific update
      operationId: fetchUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchUpdateReponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
    post:
      description: Send an update to real users
      operationId: sendUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.sendUpdateRequest'
        description: request body to send an update
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
    put:
      description: Update a specific update
      operationId: updateContent
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.contentUpdateRequest'
        description: update content body
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/{reference}/analytics:
    get:
      description: Fetch analytics for a specific update
      operationId: fetchUpdateAnalytics
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchUpdateAnalyticsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/{reference}/duplicate:
    post:
      description: Duplicate a specific update
      operationId: duplicateUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/{reference}/pin:
    post:
      description: Toggle pinned status a specific update
      operationId: toggleUpdatePin
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.createdUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/{reference}/preview:
    post:
      description: Send preview of an update
      operationId: previewUpdate
      parameters:
      - description: update unique reference.. e.g update_
        in: path
        name: reference
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/server.previewUpdateRequest'
        description: request body to create a workspace
        required: true
        x-originalParamName: message
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/pins:
    get:
      description: List pinned updates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.listUpdateResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
  /workspaces/updates/templates:
    get:
      description: list all templates. this will include both systems and your own
        created templates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.fetchTemplatesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/server.APIStatus'
          description: Internal Server Error
      tags:
      - updates
