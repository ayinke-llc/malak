// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package malak

import (
	"errors"
	"fmt"
)

const (
	// IntegrationProviderStripe is a IntegrationProvider of type stripe.
	IntegrationProviderStripe IntegrationProvider = "stripe"
	// IntegrationProviderPaystack is a IntegrationProvider of type paystack.
	IntegrationProviderPaystack IntegrationProvider = "paystack"
	// IntegrationProviderFlutterwave is a IntegrationProvider of type flutterwave.
	IntegrationProviderFlutterwave IntegrationProvider = "flutterwave"
	// IntegrationProviderMercury is a IntegrationProvider of type mercury.
	IntegrationProviderMercury IntegrationProvider = "mercury"
	// IntegrationProviderBrex is a IntegrationProvider of type brex.
	IntegrationProviderBrex IntegrationProvider = "brex"
)

var ErrInvalidIntegrationProvider = errors.New("not a valid IntegrationProvider")

// String implements the Stringer interface.
func (x IntegrationProvider) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntegrationProvider) IsValid() bool {
	_, err := ParseIntegrationProvider(string(x))
	return err == nil
}

var _IntegrationProviderValue = map[string]IntegrationProvider{
	"stripe":      IntegrationProviderStripe,
	"paystack":    IntegrationProviderPaystack,
	"flutterwave": IntegrationProviderFlutterwave,
	"mercury":     IntegrationProviderMercury,
	"brex":        IntegrationProviderBrex,
}

// ParseIntegrationProvider attempts to convert a string to a IntegrationProvider.
func ParseIntegrationProvider(name string) (IntegrationProvider, error) {
	if x, ok := _IntegrationProviderValue[name]; ok {
		return x, nil
	}
	return IntegrationProvider(""), fmt.Errorf("%s is %w", name, ErrInvalidIntegrationProvider)
}

const (
	// IntegrationTypeOauth2 is a IntegrationType of type oauth2.
	IntegrationTypeOauth2 IntegrationType = "oauth2"
	// IntegrationTypeApiKey is a IntegrationType of type api_key.
	IntegrationTypeApiKey IntegrationType = "api_key"
)

var ErrInvalidIntegrationType = errors.New("not a valid IntegrationType")

// String implements the Stringer interface.
func (x IntegrationType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntegrationType) IsValid() bool {
	_, err := ParseIntegrationType(string(x))
	return err == nil
}

var _IntegrationTypeValue = map[string]IntegrationType{
	"oauth2":  IntegrationTypeOauth2,
	"api_key": IntegrationTypeApiKey,
}

// ParseIntegrationType attempts to convert a string to a IntegrationType.
func ParseIntegrationType(name string) (IntegrationType, error) {
	if x, ok := _IntegrationTypeValue[name]; ok {
		return x, nil
	}
	return IntegrationType(""), fmt.Errorf("%s is %w", name, ErrInvalidIntegrationType)
}
